{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return source => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\n\nclass WindowToggleOperator {\n  constructor(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n\n}\n\nclass WindowToggleSubscriber extends OuterSubscriber {\n  constructor(destination, openings, closingSelector) {\n    super(destination);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  _next(value) {\n    const {\n      contexts\n    } = this;\n\n    if (contexts) {\n      const len = contexts.length;\n\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  _error(err) {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  _complete() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      let closingNotifier;\n\n      try {\n        const {\n          closingSelector\n        } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      const window = new Subject();\n      const subscription = new Subscription();\n      const context = {\n        window,\n        subscription\n      };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err) {\n    this.error(err);\n  }\n\n  notifyComplete(inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  }\n\n  closeWindow(index) {\n    if (index === -1) {\n      return;\n    }\n\n    const {\n      contexts\n    } = this;\n    const context = contexts[index];\n    const {\n      window,\n      subscription\n    } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/windowToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}