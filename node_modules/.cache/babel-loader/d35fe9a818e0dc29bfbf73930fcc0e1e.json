{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery = null) {\n  return function bufferCountOperatorFunction(source) {\n    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator {\n  constructor(bufferSize, startBufferEvery) {\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n\n}\n\nclass BufferCountSubscriber extends Subscriber {\n  constructor(destination, bufferSize) {\n    super(destination);\n    this.bufferSize = bufferSize;\n    this.buffer = [];\n  }\n\n  _next(value) {\n    const buffer = this.buffer;\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  _complete() {\n    const buffer = this.buffer;\n\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n\n    super._complete();\n  }\n\n}\n\nclass BufferSkipCountSubscriber extends Subscriber {\n  constructor(destination, bufferSize, startBufferEvery) {\n    super(destination);\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n    this.buffers = [];\n    this.count = 0;\n  }\n\n  _next(value) {\n    const {\n      bufferSize,\n      startBufferEvery,\n      buffers,\n      count\n    } = this;\n    this.count++;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--;) {\n      const buffer = buffers[i];\n      buffer.push(value);\n\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  _complete() {\n    const {\n      buffers,\n      destination\n    } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n\n    super._complete();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/bufferCount.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery = null) {\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nclass BufferCountOperator {\n    constructor(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    }\n}\nclass BufferCountSubscriber extends Subscriber {\n    constructor(destination, bufferSize) {\n        super(destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    _next(value) {\n        const buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n}\nclass BufferSkipCountSubscriber extends Subscriber {\n    constructor(destination, bufferSize, startBufferEvery) {\n        super(destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    _next(value) {\n        const { bufferSize, startBufferEvery, buffers, count } = this;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (let i = buffers.length; i--;) {\n            const buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    }\n    _complete() {\n        const { buffers, destination } = this;\n        while (buffers.length > 0) {\n            let buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        super._complete();\n    }\n}\n//# sourceMappingURL=bufferCount.js.map"]},"metadata":{},"sourceType":"module"}