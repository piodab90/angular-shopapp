{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function timeoutWith(due, withObservable, scheduler = async) {\n  return source => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator {\n  constructor(waitFor, absoluteTimeout, withObservable, scheduler) {\n    this.waitFor = waitFor;\n    this.absoluteTimeout = absoluteTimeout;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n  }\n\n}\n\nclass TimeoutWithSubscriber extends OuterSubscriber {\n  constructor(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n    super(destination);\n    this.absoluteTimeout = absoluteTimeout;\n    this.waitFor = waitFor;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n    this.action = null;\n    this.scheduleTimeout();\n  }\n\n  static dispatchTimeout(subscriber) {\n    const {\n      withObservable\n    } = subscriber;\n\n    subscriber._unsubscribeAndRecycle();\n\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  scheduleTimeout() {\n    const {\n      action\n    } = this;\n\n    if (action) {\n      this.action = action.schedule(this, this.waitFor);\n    } else {\n      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n    }\n  }\n\n  _next(value) {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n\n    super._next(value);\n  }\n\n  _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/timeoutWith.ts"],"names":[],"mappings":"AAEA,SAAS,KAAT,QAAsB,oBAAtB;AAEA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AA4DA,OAAM,SAAU,WAAV,CAA4B,GAA5B,EAC4B,cAD5B,EAE4B,SAAA,GAA2B,KAFvD,EAE4D;AAChE,SAAQ,MAAD,IAA0B;AAC/B,QAAI,eAAe,GAAG,MAAM,CAAC,GAAD,CAA5B;AACA,QAAI,OAAO,GAAG,eAAe,GAAI,CAAC,GAAD,GAAO,SAAS,CAAC,GAAV,EAAX,GAA8B,IAAI,CAAC,GAAL,CAAiB,GAAjB,CAA3D;AACA,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,eAAjC,EAAkD,cAAlD,EAAkE,SAAlE,CAAZ,CAAP;AACD,GAJD;AAKD;;AAED,MAAM,mBAAN,CAAyB;AACvB,EAAA,WAAA,CAAoB,OAApB,EACoB,eADpB,EAEoB,cAFpB,EAGoB,SAHpB,EAG4C;AAHxB,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,qBAAJ,CACtB,UADsB,EACV,KAAK,eADK,EACY,KAAK,OADjB,EAC0B,KAAK,cAD/B,EAC+C,KAAK,SADpD,CAAjB,CAAP;AAGD;;AAXsB;;AAmBzB,MAAM,qBAAN,SAA0C,eAA1C,CAA+D;AAI7D,EAAA,WAAA,CAAY,WAAZ,EACoB,eADpB,EAEoB,OAFpB,EAGoB,cAHpB,EAIoB,SAJpB,EAI4C;AAC1C,UAAM,WAAN;AAJkB,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,SAAA,GAAA,SAAA;AANZ,SAAA,MAAA,GAAuD,IAAvD;AAQN,SAAK,eAAL;AACD;;AAEO,SAAO,eAAP,CAA6B,UAA7B,EAAoE;AAC1E,UAAM;AAAE,MAAA;AAAF,QAAqB,UAA3B;;AACO,IAAA,UAAW,CAAC,sBAAZ;;AACP,IAAA,UAAU,CAAC,GAAX,CAAe,iBAAiB,CAAC,UAAD,EAAa,cAAb,CAAhC;AACD;;AAEO,EAAA,eAAe,GAAA;AACrB,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;;AACA,QAAI,MAAJ,EAAY;AAMV,WAAK,MAAL,GAA8D,MAAM,CAAC,QAAP,CAAgB,IAAhB,EAAsB,KAAK,OAA3B,CAA9D;AACD,KAPD,MAOO;AACL,WAAK,GAAL,CAAS,KAAK,MAAL,GAA8D,KAAK,SAAL,CAAe,QAAf,CACrE,qBAAqB,CAAC,eAD+C,EAC9B,KAAK,OADyB,EAChB,IADgB,CAAvE;AAGD;AACF;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,CAAC,KAAK,eAAV,EAA2B;AACzB,WAAK,eAAL;AACD;;AACD,UAAM,KAAN,CAAY,KAAZ;AACD;;AAGD,EAAA,YAAY,GAAA;AACV,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,cAAL,GAAsB,IAAtB;AACD;;AA/C4D","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function timeoutWith(due, withObservable, scheduler = async) {\n    return (source) => {\n        let absoluteTimeout = isDate(due);\n        let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nclass TimeoutWithOperator {\n    constructor(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    }\n}\nclass TimeoutWithSubscriber extends OuterSubscriber {\n    constructor(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        super(destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    static dispatchTimeout(subscriber) {\n        const { withObservable } = subscriber;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    }\n    scheduleTimeout() {\n        const { action } = this;\n        if (action) {\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    }\n    _next(value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        super._next(value);\n    }\n    _unsubscribe() {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    }\n}\n//# sourceMappingURL=timeoutWith.js.map"]},"metadata":{},"sourceType":"module"}