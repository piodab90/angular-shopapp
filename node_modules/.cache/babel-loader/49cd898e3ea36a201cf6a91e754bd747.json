{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n  return source => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator {\n  constructor(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n\n}\n\nclass RetrySubscriber extends Subscriber {\n  constructor(destination, count, source) {\n    super(destination);\n    this.count = count;\n    this.source = source;\n  }\n\n  error(err) {\n    if (!this.isStopped) {\n      const {\n        source,\n        count\n      } = this;\n\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AAmDA,OAAM,SAAU,KAAV,CAAmB,KAAA,GAAgB,CAAC,CAApC,EAAqC;AACzC,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,MAAzB,CAAZ,CAAlC;AACD;;AAED,MAAM,aAAN,CAAmB;AACjB,EAAA,WAAA,CAAoB,KAApB,EACoB,MADpB,EACyC;AADrB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,KAArC,EAA4C,KAAK,MAAjD,CAAjB,CAAP;AACD;;AAPgB;;AAenB,MAAM,eAAN,SAAiC,UAAjC,CAA8C;AAC5C,EAAA,WAAA,CAAY,WAAZ,EACoB,KADpB,EAEoB,MAFpB,EAEyC;AACvC,UAAM,WAAN;AAFkB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEnB;;AACD,EAAA,KAAK,CAAC,GAAD,EAAS;AACZ,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA;AAAV,UAAoB,IAA1B;;AACA,UAAI,KAAK,KAAK,CAAd,EAAiB;AACf,eAAO,MAAM,KAAN,CAAY,GAAZ,CAAP;AACD,OAFD,MAEO,IAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACrB,aAAK,KAAL,GAAa,KAAK,GAAG,CAArB;AACD;;AACD,MAAA,MAAM,CAAC,SAAP,CAAiB,KAAK,sBAAL,EAAjB;AACD;AACF;;AAhB2C","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}