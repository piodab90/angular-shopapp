{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n  return source => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n  constructor(compareTo, comparator) {\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n  }\n\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n  constructor(destination, compareTo, comparator) {\n    super(destination);\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n    this._a = [];\n    this._b = [];\n    this._oneComplete = false;\n    this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  _next(value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n\n      this.checkValues();\n    }\n  }\n\n  _complete() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n\n    this.unsubscribe();\n  }\n\n  checkValues() {\n    const {\n      _a,\n      _b,\n      comparator\n    } = this;\n\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n\n      let b = _b.shift();\n\n      let areEqual = false;\n\n      try {\n        areEqual = comparator ? comparator(a, b) : a === b;\n      } catch (e) {\n        this.destination.error(e);\n      }\n\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value) {\n    const {\n      destination\n    } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n\n      this.checkValues();\n    }\n  }\n\n  completeB() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n}\n\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n  constructor(destination, parent) {\n    super(destination);\n    this.parent = parent;\n  }\n\n  _next(value) {\n    this.parent.nextB(value);\n  }\n\n  _error(err) {\n    this.parent.error(err);\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.parent.completeB();\n    this.unsubscribe();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/sequenceEqual.ts"],"names":[],"mappings":"AAEA,SAAS,UAAT,QAA2B,eAA3B;AA8DA,OAAM,SAAU,aAAV,CAA2B,SAA3B,EAC2B,UAD3B,EAC+D;AACnE,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,qBAAJ,CAA0B,SAA1B,EAAqC,UAArC,CAAZ,CAAlC;AACD;AAED,OAAM,MAAO,qBAAP,CAA4B;AAChC,EAAA,WAAA,CAAoB,SAApB,EACoB,UADpB,EACuD;AADnC,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAAkC,MAAlC,EAA6C;AAC/C,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,uBAAJ,CAA4B,UAA5B,EAAwC,KAAK,SAA7C,EAAwD,KAAK,UAA7D,CAAjB,CAAP;AACD;;AAP+B;AAelC,OAAM,MAAO,uBAAP,SAA6C,UAA7C,CAA0D;AAK9D,EAAA,WAAA,CAAY,WAAZ,EACoB,SADpB,EAEoB,UAFpB,EAEuD;AACrD,UAAM,WAAN;AAFkB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,UAAA,GAAA,UAAA;AANZ,SAAA,EAAA,GAAU,EAAV;AACA,SAAA,EAAA,GAAU,EAAV;AACA,SAAA,YAAA,GAAe,KAAf;AAML,SAAK,WAAL,CAAkC,GAAlC,CAAsC,SAAS,CAAC,SAAV,CAAoB,IAAI,gCAAJ,CAAqC,WAArC,EAAkD,IAAlD,CAApB,CAAtC;AACF;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,KAAK,YAAL,IAAqB,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAA5C,EAA+C;AAC7C,WAAK,IAAL,CAAU,KAAV;AACD,KAFD,MAEO;AACL,WAAK,EAAL,CAAQ,IAAR,CAAa,KAAb;;AACA,WAAK,WAAL;AACD;AACF;;AAEM,EAAA,SAAS,GAAA;AACd,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,IAAL,CAAU,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAAnB,IAAwB,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAArD;AACD,KAFD,MAEO;AACL,WAAK,YAAL,GAAoB,IAApB;AACD;;AACD,SAAK,WAAL;AACD;;AAED,EAAA,WAAW,GAAA;AACT,UAAM;AAAE,MAAA,EAAF;AAAM,MAAA,EAAN;AAAU,MAAA;AAAV,QAAyB,IAA/B;;AACA,WAAO,EAAE,CAAC,MAAH,GAAY,CAAZ,IAAiB,EAAE,CAAC,MAAH,GAAY,CAApC,EAAuC;AACrC,UAAI,CAAC,GAAG,EAAE,CAAC,KAAH,EAAR;;AACA,UAAI,CAAC,GAAG,EAAE,CAAC,KAAH,EAAR;;AACA,UAAI,QAAQ,GAAG,KAAf;;AACA,UAAI;AACF,QAAA,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAb,GAAsB,CAAC,KAAK,CAAjD;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,aAAK,WAAL,CAAiB,KAAjB,CAAuB,CAAvB;AACD;;AACD,UAAI,CAAC,QAAL,EAAe;AACb,aAAK,IAAL,CAAU,KAAV;AACD;AACF;AACF;;AAED,EAAA,IAAI,CAAC,KAAD,EAAe;AACjB,UAAM;AAAE,MAAA;AAAF,QAAkB,IAAxB;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;AACA,IAAA,WAAW,CAAC,QAAZ;AACD;;AAED,EAAA,KAAK,CAAC,KAAD,EAAS;AACZ,QAAI,KAAK,YAAL,IAAqB,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAA5C,EAA+C;AAC7C,WAAK,IAAL,CAAU,KAAV;AACD,KAFD,MAEO;AACL,WAAK,EAAL,CAAQ,IAAR,CAAa,KAAb;;AACA,WAAK,WAAL;AACD;AACF;;AAED,EAAA,SAAS,GAAA;AACP,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,IAAL,CAAU,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAAnB,IAAwB,KAAK,EAAL,CAAQ,MAAR,KAAmB,CAArD;AACD,KAFD,MAEO;AACL,WAAK,YAAL,GAAoB,IAApB;AACD;AACF;;AApE6D;;AAuEhE,MAAM,gCAAN,SAAqD,UAArD,CAAkE;AAChE,EAAA,WAAA,CAAY,WAAZ,EAA8C,MAA9C,EAAmF;AACjF,UAAM,WAAN;AAD4C,SAAA,MAAA,GAAA,MAAA;AAE7C;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,SAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB;AACD;;AAES,EAAA,MAAM,CAAC,GAAD,EAAS;AACvB,SAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB;AACA,SAAK,WAAL;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,SAAK,MAAL,CAAY,SAAZ;AACA,SAAK,WAAL;AACD;;AAjB+D","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n    constructor(compareTo, comparator) {\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n    constructor(destination, compareTo, comparator) {\n        super(destination);\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    _next(value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    }\n    _complete() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n        this.unsubscribe();\n    }\n    checkValues() {\n        const { _a, _b, comparator } = this;\n        while (_a.length > 0 && _b.length > 0) {\n            let a = _a.shift();\n            let b = _b.shift();\n            let areEqual = false;\n            try {\n                areEqual = comparator ? comparator(a, b) : a === b;\n            }\n            catch (e) {\n                this.destination.error(e);\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    }\n    emit(value) {\n        const { destination } = this;\n        destination.next(value);\n        destination.complete();\n    }\n    nextB(value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    }\n    completeB() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    }\n}\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n    constructor(destination, parent) {\n        super(destination);\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.nextB(value);\n    }\n    _error(err) {\n        this.parent.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.completeB();\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=sequenceEqual.js.map"]},"metadata":{},"sourceType":"module"}