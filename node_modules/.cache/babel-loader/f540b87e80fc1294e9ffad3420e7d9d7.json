{"ast":null,"code":"import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\n\nclass WindowOperator {\n  constructor(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n\n}\n\nclass WindowSubscriber extends OuterSubscriber {\n  constructor(destination, closingSelector) {\n    super(destination);\n    this.destination = destination;\n    this.closingSelector = closingSelector;\n    this.openWindow();\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error, innerSub) {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub) {\n    this.openWindow(innerSub);\n  }\n\n  _next(value) {\n    this.window.next(value);\n  }\n\n  _error(err) {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  _complete() {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  unsubscribeClosingNotification() {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  openWindow(innerSub = null) {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject();\n    this.destination.next(window);\n    let closingNotifier;\n\n    try {\n      const {\n        closingSelector\n      } = this;\n      closingNotifier = closingSelector();\n    } catch (e) {\n      this.destination.error(e);\n      this.window.error(e);\n      return;\n    }\n\n    this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/windowWhen.ts"],"names":[],"mappings":"AAGA,SAAS,OAAT,QAAwB,YAAxB;AAEA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAgDA,OAAM,SAAU,UAAV,CAAwB,eAAxB,EAA8D;AAClE,SAAO,SAAS,0BAAT,CAAoC,MAApC,EAAyD;AAC9D,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAsB,eAAtB,CAAZ,CAAP;AACD,GAFD;AAGD;;AAED,MAAM,cAAN,CAAoB;AAClB,EAAA,WAAA,CAAoB,eAApB,EAA0D;AAAtC,SAAA,eAAA,GAAA,eAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAAwC,MAAxC,EAAmD;AACrD,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,gBAAJ,CAAqB,UAArB,EAAiC,KAAK,eAAtC,CAAjB,CAAP;AACD;;AANiB;;AAcpB,MAAM,gBAAN,SAAkC,eAAlC,CAAyD;AAIvD,EAAA,WAAA,CAAsB,WAAtB,EACoB,eADpB,EAC0D;AACxD,UAAM,WAAN;AAFoB,SAAA,WAAA,GAAA,WAAA;AACF,SAAA,eAAA,GAAA,eAAA;AAElB,SAAK,UAAL;AACD;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEkC;AAC1C,SAAK,UAAL,CAAgB,QAAhB;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAa,QAAb,EAA8C;AACvD,SAAK,MAAL,CAAY,KAAZ;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAkC;AAC9C,SAAK,UAAL,CAAgB,QAAhB;AACD;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;AAES,EAAA,MAAM,CAAC,GAAD,EAAS;AACvB,SAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB;AACA,SAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACA,SAAK,8BAAL;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,SAAK,MAAL,CAAY,QAAZ;AACA,SAAK,WAAL,CAAiB,QAAjB;AACA,SAAK,8BAAL;AACD;;AAEO,EAAA,8BAA8B,GAAA;AACpC,QAAI,KAAK,mBAAT,EAA8B;AAC5B,WAAK,mBAAL,CAAyB,WAAzB;AACD;AACF;;AAEO,EAAA,UAAU,CAAC,QAAA,GAAoC,IAArC,EAAyC;AACzD,QAAI,QAAJ,EAAc;AACZ,WAAK,MAAL,CAAY,QAAZ;AACA,MAAA,QAAQ,CAAC,WAAT;AACD;;AAED,UAAM,UAAU,GAAG,KAAK,MAAxB;;AACA,QAAI,UAAJ,EAAgB;AACd,MAAA,UAAU,CAAC,QAAX;AACD;;AAED,UAAM,MAAM,GAAG,KAAK,MAAL,GAAc,IAAI,OAAJ,EAA7B;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AAEA,QAAI,eAAJ;;AACA,QAAI;AACF,YAAM;AAAE,QAAA;AAAF,UAAsB,IAA5B;AACA,MAAA,eAAe,GAAG,eAAe,EAAjC;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAK,WAAL,CAAiB,KAAjB,CAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB;AACA;AACD;;AACD,SAAK,GAAL,CAAS,KAAK,mBAAL,GAA2B,iBAAiB,CAAC,IAAD,EAAO,eAAP,CAArD;AACD;;AAtEsD","sourcesContent":["import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nclass WindowOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass WindowSubscriber extends OuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        this.openWindow(innerSub);\n    }\n    _next(value) {\n        this.window.next(value);\n    }\n    _error(err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    }\n    _complete() {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    }\n    unsubscribeClosingNotification() {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    }\n    openWindow(innerSub = null) {\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        const prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        const window = this.window = new Subject();\n        this.destination.next(window);\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (e) {\n            this.destination.error(e);\n            this.window.error(e);\n            return;\n        }\n        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n}\n//# sourceMappingURL=windowWhen.js.map"]},"metadata":{},"sourceType":"module"}