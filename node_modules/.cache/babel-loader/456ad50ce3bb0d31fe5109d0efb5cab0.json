{"ast":null,"code":"import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function repeatWhen(notifier) {\n  return source => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n\n}\n\nclass RepeatWhenSubscriber extends OuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next();\n    }\n  }\n\n  _unsubscribe() {\n    const {\n      notifications,\n      retriesSubscription\n    } = this;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  }\n\n  _unsubscribeAndRecycle() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n\n    super._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    return this;\n  }\n\n  subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n\n    try {\n      const {\n        notifier\n      } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":"AAGA,SAAS,OAAT,QAAwB,YAAxB;AAGA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAkCA,OAAM,SAAU,UAAV,CAAwB,QAAxB,EAAqF;AACzF,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,kBAAJ,CAAuB,QAAvB,CAAZ,CAAlC;AACD;;AAED,MAAM,kBAAN,CAAwB;AACtB,EAAA,WAAA,CAAsB,QAAtB,EAAmF;AAA7D,SAAA,QAAA,GAAA,QAAA;AACrB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,oBAAJ,CAAyB,UAAzB,EAAqC,KAAK,QAA1C,EAAoD,MAApD,CAAjB,CAAP;AACD;;AANqB;;AAcxB,MAAM,oBAAN,SAAyC,eAAzC,CAA8D;AAO5D,EAAA,WAAA,CAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;AACvC,UAAM,WAAN;AAFkB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAJZ,SAAA,yBAAA,GAAqC,IAArC;AAMP;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEgC;AACxC,SAAK,yBAAL,GAAiC,IAAjC;AACA,SAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAgC;AAC5C,QAAI,KAAK,yBAAL,KAAmC,KAAvC,EAA8C;AAC5C,aAAO,MAAM,QAAN,EAAP;AACD;AACF;;AAED,EAAA,QAAQ,GAAA;AACN,SAAK,yBAAL,GAAiC,KAAjC;;AAEA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,UAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,aAAK,kBAAL;AACD;;AACD,UAAI,CAAC,KAAK,mBAAN,IAA6B,KAAK,mBAAL,CAAyB,MAA1D,EAAkE;AAChE,eAAO,MAAM,QAAN,EAAP;AACD;;AAED,WAAK,sBAAL;;AACA,WAAK,aAAL,CAAmB,IAAnB;AACD;AACF;;AAGD,EAAA,YAAY,GAAA;AACV,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAAyC,IAA/C;;AACA,QAAI,aAAJ,EAAmB;AACjB,MAAA,aAAa,CAAC,WAAd;AACA,WAAK,aAAL,GAAqB,IAArB;AACD;;AACD,QAAI,mBAAJ,EAAyB;AACvB,MAAA,mBAAmB,CAAC,WAApB;AACA,WAAK,mBAAL,GAA2B,IAA3B;AACD;;AACD,SAAK,OAAL,GAAe,IAAf;AACD;;AAGD,EAAA,sBAAsB,GAAA;AACpB,UAAM;AAAE,MAAA;AAAF,QAAmB,IAAzB;AAEA,SAAK,YAAL,GAAoB,IAApB;;AACA,UAAM,sBAAN;;AACA,SAAK,YAAL,GAAoB,YAApB;AAEA,WAAO,IAAP;AACD;;AAEO,EAAA,kBAAkB,GAAA;AACxB,SAAK,aAAL,GAAqB,IAAI,OAAJ,EAArB;AACA,QAAI,OAAJ;;AACA,QAAI;AACF,YAAM;AAAE,QAAA;AAAF,UAAe,IAArB;AACA,MAAA,OAAO,GAAG,QAAQ,CAAC,KAAK,aAAN,CAAlB;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,aAAO,MAAM,QAAN,EAAP;AACD;;AACD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,mBAAL,GAA2B,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAA5C;AACD;;AA9E2D","sourcesContent":["import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends OuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete(innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    }\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}