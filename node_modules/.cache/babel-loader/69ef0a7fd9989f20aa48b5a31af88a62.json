{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n  return source => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator {\n  constructor(durationSelector, leading, trailing) {\n    this.durationSelector = durationSelector;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n  }\n\n}\n\nclass ThrottleSubscriber extends OuterSubscriber {\n  constructor(destination, durationSelector, _leading, _trailing) {\n    super(destination);\n    this.destination = destination;\n    this.durationSelector = durationSelector;\n    this._leading = _leading;\n    this._trailing = _trailing;\n    this._hasValue = false;\n  }\n\n  _next(value) {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  send() {\n    const {\n      _hasValue,\n      _sendValue\n    } = this;\n\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n\n    this._hasValue = false;\n    this._sendValue = null;\n  }\n\n  throttle(value) {\n    const duration = this.tryDurationSelector(value);\n\n    if (!!duration) {\n      this.add(this._throttled = subscribeToResult(this, duration));\n    }\n  }\n\n  tryDurationSelector(value) {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  throttlingDone() {\n    const {\n      _throttled,\n      _trailing\n    } = this;\n\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n\n    this._throttled = null;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.throttlingDone();\n  }\n\n  notifyComplete() {\n    this.throttlingDone();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/throttle.ts"],"names":[],"mappings":"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","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map"]},"metadata":{},"sourceType":"module"}