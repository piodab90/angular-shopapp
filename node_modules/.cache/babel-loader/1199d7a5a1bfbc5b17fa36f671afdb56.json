{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"/assets/mock-items.json\";\n    this.observableItems = new BehaviorSubject(this.items);\n    this.http.request(\"GET\", this.url, {\n      responseType: \"json\"\n    }).pipe(catchError(this.errorHandler)).subscribe(element => {\n      this.items = element;\n      this.itemsChanged();\n    });\n  }\n\n  errorHandler(error) {\n    return throwError(error.message || \"Server Error\");\n  }\n\n  getItems() {\n    return this.observableItems.asObservable();\n  }\n\n  getItemById(itemId) {\n    let item = this.items.find(item => item.id === itemId);\n    let observableItem = new BehaviorSubject(item);\n    return observableItem.asObservable();\n  }\n\n  updateItemQuantity(item, amount) {\n    if (item.quantity + amount < 0) {\n      return throwError(\"Not enough\" + item.name + \"items!\");\n    }\n\n    item.quantity += amount;\n    console.log(item);\n    this.items.forEach(element => {\n      console.log(element);\n    });\n    this.itemsChanged();\n  }\n\n  addItem(item) {\n    let maxId = 0;\n    this.items.forEach(element => {\n      if (element.id > maxId) {\n        maxId = element.id;\n      }\n    });\n    maxId++;\n    item.id = maxId;\n    this.items.push(item);\n    this.itemsChanged();\n  }\n\n  removeItem(item) {\n    const index = this.items.indexOf(item);\n\n    if (index !== -1) {\n      this.items.splice(index, 1);\n      this.itemsChanged();\n    }\n  }\n\n  itemsChanged() {\n    this.observableItems.next(this.items);\n  }\n\n}\n\nItemService.ɵfac = function ItemService_Factory(t) {\n  return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nItemService.ɵprov = i0.ɵɵdefineInjectable({\n  token: ItemService,\n  factory: ItemService.ɵfac,\n  providedIn: 'root'\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(ItemService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["C:\\WORK\\shop-app\\src\\app\\item.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAqB,eAArB,QAA4C,MAA5C;AACA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAS,UAAT,QAA2B,gBAA3B;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAMtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAJZ,SAAA,GAAA,GAAc,yBAAd;AAEA,SAAA,eAAA,GAA2C,IAAI,eAAJ,CAA4B,KAAK,KAAjC,CAA3C;AAGN,SAAK,IAAL,CAAU,OAAV,CAA0B,KAA1B,EAAiC,KAAK,GAAtC,EAA2C;AAAC,MAAA,YAAY,EAAE;AAAf,KAA3C,EAAmE,IAAnE,CAAwE,UAAU,CAAC,KAAK,YAAN,CAAlF,EAAuG,SAAvG,CAAiH,OAAO,IAAG;AACzH,WAAK,KAAL,GAAa,OAAb;AACA,WAAK,YAAL;AACD,KAHD;AAID;;AAED,EAAA,YAAY,CAAC,KAAD,EAAyB;AACnC,WAAO,UAAU,CAAC,KAAK,CAAC,OAAN,IAAiB,cAAlB,CAAjB;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,KAAK,eAAL,CAAqB,YAArB,EAAP;AACD;;AAED,EAAA,WAAW,CAAC,MAAD,EAAe;AACxB,QAAI,IAAI,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAI,IAAI,IAAI,CAAC,EAAL,KAAY,MAApC,CAAX;AACA,QAAI,cAAc,GAA0B,IAAI,eAAJ,CAA0B,IAA1B,CAA5C;AACA,WAAO,cAAc,CAAC,YAAf,EAAP;AACD;;AAED,EAAA,kBAAkB,CAAC,IAAD,EAAa,MAAb,EAA2B;AAC3C,QAAI,IAAI,CAAC,QAAL,GAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,aAAO,UAAU,CAAC,eAAe,IAAI,CAAC,IAApB,GAA2B,QAA5B,CAAjB;AACD;;AACD,IAAA,IAAI,CAAC,QAAL,IAAiB,MAAjB;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,OAAO,IAAG;AAC3B,MAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACD,KAFD;AAGA,SAAK,YAAL;AACD;;AAED,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,QAAI,KAAK,GAAG,CAAZ;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,OAAO,IAAG;AAC3B,UAAI,OAAO,CAAC,EAAR,GAAa,KAAjB,EAAwB;AACtB,QAAA,KAAK,GAAG,OAAO,CAAC,EAAhB;AACD;AACF,KAJD;AAKA,IAAA,KAAK;AACL,IAAA,IAAI,CAAC,EAAL,GAAU,KAAV;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACA,SAAK,YAAL;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAAW;AACnB,UAAM,KAAK,GAAW,KAAK,KAAL,CAAW,OAAX,CAAmB,IAAnB,CAAtB;;AACA,QAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,CAAzB;AACA,WAAK,YAAL;AACH;AACF;;AAED,EAAA,YAAY,GAAA;AACV,SAAK,eAAL,CAAqB,IAArB,CAA0B,KAAK,KAA/B;AACD;;AA9DqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV;;;;;uBAED,W,EAAW,CAAA;UAHvB,UAGuB;WAHZ;AACV,MAAA,UAAU,EAAE;AADF,K;AAGY,GAAA,C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Item } from './Item';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  private url: string = \"/assets/mock-items.json\";\n  private items: Item[];\n  private observableItems: BehaviorSubject<Item[]> = new BehaviorSubject<Item[]>(this.items);\n\n  constructor(private http: HttpClient) {\n    this.http.request<Item[]>(\"GET\", this.url, {responseType: \"json\"}).pipe(catchError(this.errorHandler)).subscribe(element => {\n      this.items = element;\n      this.itemsChanged();\n    });\n  }\n\n  errorHandler(error: HttpErrorResponse) {\n    return throwError(error.message || \"Server Error\");\n  }\n\n  getItems(): Observable<Item[]> {\n    return this.observableItems.asObservable();\n  }\n\n  getItemById(itemId: number): Observable<Item> {\n    let item = this.items.find(item => item.id === itemId);\n    let observableItem: BehaviorSubject<Item> = new BehaviorSubject<Item>(item);\n    return observableItem.asObservable();\n  }\n\n  updateItemQuantity(item: Item, amount: number) {\n    if (item.quantity + amount < 0) {\n      return throwError(\"Not enough\" + item.name + \"items!\");\n    }\n    item.quantity += amount;\n    console.log(item);\n    this.items.forEach(element => {\n      console.log(element);\n    });\n    this.itemsChanged();\n  }\n\n  addItem(item: Item) {\n    let maxId = 0;\n    this.items.forEach(element => {\n      if (element.id > maxId) {\n        maxId = element.id;\n      }\n    });\n    maxId++;\n    item.id = maxId;\n    this.items.push(item);\n    this.itemsChanged();\n  }\n\n  removeItem(item: Item) {\n    const index: number = this.items.indexOf(item);\n    if (index !== -1) {\n        this.items.splice(index, 1);\n        this.itemsChanged();\n    }  \n  }\n\n  itemsChanged() {\n    this.observableItems.next(this.items);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}