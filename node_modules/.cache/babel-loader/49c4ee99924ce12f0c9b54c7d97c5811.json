{"ast":null,"code":"import { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nconst NONE = {};\nexport function combineLatest(...observables) {\n  let resultSelector = null;\n  let scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop();\n  }\n\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nexport class CombineLatestOperator {\n  constructor(resultSelector) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n\n}\nexport class CombineLatestSubscriber extends OuterSubscriber {\n  constructor(destination, resultSelector) {\n    super(destination);\n    this.resultSelector = resultSelector;\n    this.active = 0;\n    this.values = [];\n    this.observables = [];\n  }\n\n  _next(observable) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused) {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  _tryResultSelector(values) {\n    let result;\n\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/observable/combineLatest.ts"],"names":[],"mappings":"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","sourcesContent":["import { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nconst NONE = {};\nexport function combineLatest(...observables) {\n    let resultSelector = null;\n    let scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nexport class CombineLatestOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class CombineLatestSubscriber extends OuterSubscriber {\n    constructor(destination, resultSelector) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    _next(observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    }\n    _complete() {\n        const observables = this.observables;\n        const len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (let i = 0; i < len; i++) {\n                const observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    }\n    notifyComplete(unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const values = this.values;\n        const oldVal = values[outerIndex];\n        const toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    }\n    _tryResultSelector(values) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=combineLatest.js.map"]},"metadata":{},"sourceType":"module"}