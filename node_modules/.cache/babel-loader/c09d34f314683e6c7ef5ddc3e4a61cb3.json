{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n  return source => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator {\n  constructor(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n\n}\n\nclass SingleSubscriber extends Subscriber {\n  constructor(destination, predicate, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.seenValue = false;\n    this.index = 0;\n  }\n\n  applySingleValue(value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  _next(value) {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  tryNext(value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  _complete() {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError());\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/single.ts"],"names":[],"mappings":"AAEA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAkDA,OAAM,SAAU,MAAV,CAAoB,SAApB,EAA2F;AAC/F,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,SAAnB,EAA8B,MAA9B,CAAZ,CAAlC;AACD;;AAED,MAAM,cAAN,CAAoB;AAClB,EAAA,WAAA,CAAoB,SAApB,EACoB,MADpB,EAC0C;AADtB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,gBAAJ,CAAqB,UAArB,EAAiC,KAAK,SAAtC,EAAiD,KAAK,MAAtD,CAAjB,CAAP;AACD;;AAPiB;;AAepB,MAAM,gBAAN,SAAkC,UAAlC,CAA+C;AAK7C,EAAA,WAAA,CAAY,WAAZ,EACoB,SADpB,EAEoB,MAFpB,EAE0C;AACxC,UAAM,WAAN;AAFkB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AANZ,SAAA,SAAA,GAAqB,KAArB;AAEA,SAAA,KAAA,GAAgB,CAAhB;AAMP;;AAEO,EAAA,gBAAgB,CAAC,KAAD,EAAS;AAC/B,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,WAAL,CAAiB,KAAjB,CAAuB,yCAAvB;AACD,KAFD,MAEO;AACL,WAAK,SAAL,GAAiB,IAAjB;AACA,WAAK,WAAL,GAAmB,KAAnB;AACD;AACF;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,UAAM,KAAK,GAAG,KAAK,KAAL,EAAd;;AAEA,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,OAAL,CAAa,KAAb,EAAoB,KAApB;AACD,KAFD,MAEO;AACL,WAAK,gBAAL,CAAsB,KAAtB;AACD;AACF;;AAEO,EAAA,OAAO,CAAC,KAAD,EAAW,KAAX,EAAwB;AACrC,QAAI;AACF,UAAI,KAAK,SAAL,CAAe,KAAf,EAAsB,KAAtB,EAA6B,KAAK,MAAlC,CAAJ,EAA+C;AAC7C,aAAK,gBAAL,CAAsB,KAAtB;AACD;AACF,KAJD,CAIE,OAAO,GAAP,EAAY;AACZ,WAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACD;AACF;;AAES,EAAA,SAAS,GAAA;AACjB,UAAM,WAAW,GAAG,KAAK,WAAzB;;AAEA,QAAI,KAAK,KAAL,GAAa,CAAjB,EAAoB;AAClB,MAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,SAAL,GAAiB,KAAK,WAAtB,GAAoC,SAArD;AACA,MAAA,WAAW,CAAC,QAAZ;AACD,KAHD,MAGO;AACL,MAAA,WAAW,CAAC,KAAZ,CAAkB,IAAI,UAAJ,EAAlB;AACD;AACF;;AAjD4C","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n    return (source) => source.lift(new SingleOperator(predicate, source));\n}\nclass SingleOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass SingleSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    applySingleValue(value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    }\n    _next(value) {\n        const index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    }\n    tryNext(value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    }\n}\n//# sourceMappingURL=single.js.map"]},"metadata":{},"sourceType":"module"}