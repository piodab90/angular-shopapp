{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator {\n  constructor(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n\n}\n\nclass TakeLastSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.ring = new Array();\n    this.count = 0;\n  }\n\n  _next(value) {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  _complete() {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/takeLast.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,uBAAT,QAAwC,iCAAxC;AACA,SAAS,KAAT,QAAsB,qBAAtB;AA8CA,OAAM,SAAU,QAAV,CAAsB,KAAtB,EAAmC;AACvC,SAAO,SAAS,wBAAT,CAAkC,MAAlC,EAAuD;AAC5D,QAAI,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,KAAK,EAAZ;AACD,KAFD,MAEO;AACL,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,gBAAJ,CAAqB,KAArB,CAAZ,CAAP;AACD;AACF,GAND;AAOD;;AAED,MAAM,gBAAN,CAAsB;AACpB,EAAA,WAAA,CAAoB,KAApB,EAAiC;AAAb,SAAA,KAAA,GAAA,KAAA;;AAClB,QAAI,KAAK,KAAL,GAAa,CAAjB,EAAoB;AAClB,YAAM,IAAI,uBAAJ,EAAN;AACD;AACF;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,KAAK,KAAxC,CAAjB,CAAP;AACD;;AATmB;;AAiBtB,MAAM,kBAAN,SAAoC,UAApC,CAAiD;AAI/C,EAAA,WAAA,CAAY,WAAZ,EAAgD,KAAhD,EAA6D;AAC3D,UAAM,WAAN;AAD8C,SAAA,KAAA,GAAA,KAAA;AAHxC,SAAA,IAAA,GAAiB,IAAI,KAAJ,EAAjB;AACA,SAAA,KAAA,GAAgB,CAAhB;AAIP;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,KAAK,GAAG,KAAK,KAAL,EAAd;;AAEA,QAAI,IAAI,CAAC,MAAL,GAAc,KAAlB,EAAyB;AACvB,MAAA,IAAI,CAAC,IAAL,CAAU,KAAV;AACD,KAFD,MAEO;AACL,YAAM,KAAK,GAAG,KAAK,GAAG,KAAtB;AACA,MAAA,IAAI,CAAC,KAAD,CAAJ,GAAc,KAAd;AACD;AACF;;AAES,EAAA,SAAS,GAAA;AACjB,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,QAAI,KAAK,GAAG,KAAK,KAAjB;;AAEA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,KAAK,GAAG,KAAK,KAAL,IAAc,KAAK,KAAnB,GAA2B,KAAK,KAAhC,GAAwC,KAAK,KAA3D;AACA,YAAM,IAAI,GAAI,KAAK,IAAnB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC9B,cAAM,GAAG,GAAI,KAAK,EAAN,GAAY,KAAxB;AACA,QAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,GAAD,CAArB;AACD;AACF;;AAED,IAAA,WAAW,CAAC,QAAZ;AACD;;AApC8C","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nclass TakeLastOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    }\n}\nclass TakeLastSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    _next(value) {\n        const ring = this.ring;\n        const total = this.total;\n        const count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            const index = count % total;\n            ring[index] = value;\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        let count = this.count;\n        if (count > 0) {\n            const total = this.count >= this.total ? this.total : this.count;\n            const ring = this.ring;\n            for (let i = 0; i < total; i++) {\n                const idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=takeLast.js.map"]},"metadata":{},"sourceType":"module"}