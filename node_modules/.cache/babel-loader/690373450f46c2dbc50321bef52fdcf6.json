{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n  return new Observable(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) {\n          sub.add(scheduler.schedule(() => subscriber.next(value)));\n        },\n\n        error(err) {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        },\n\n        complete() {\n          sub.add(scheduler.schedule(() => subscriber.complete()));\n        }\n\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleObservable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,UAAU,IAAI,iBAAvB,QAAgD,sBAAhD;AAGA,OAAM,SAAU,kBAAV,CAAgC,KAAhC,EAA6D,SAA7D,EAAqF;AACzF,SAAO,IAAI,UAAJ,CAAkB,UAAU,IAAG;AACpC,UAAM,GAAG,GAAG,IAAI,YAAJ,EAAZ;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,MAAK;AAC9B,YAAM,UAAU,GAAoB,KAAK,CAAC,iBAAD,CAAL,EAApC;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,UAAU,CAAC,SAAX,CAAqB;AAC3B,QAAA,IAAI,CAAC,KAAD,EAAM;AAAI,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,MAAM,UAAU,CAAC,IAAX,CAAgB,KAAhB,CAAzB,CAAR;AAA4D,SAD/C;;AAE3B,QAAA,KAAK,CAAC,GAAD,EAAI;AAAI,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,MAAM,UAAU,CAAC,KAAX,CAAiB,GAAjB,CAAzB,CAAR;AAA2D,SAF7C;;AAG3B,QAAA,QAAQ,GAAA;AAAK,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,MAAM,UAAU,CAAC,QAAX,EAAzB,CAAR;AAA2D;;AAH7C,OAArB,CAAR;AAKD,KAPO,CAAR;AAQA,WAAO,GAAP;AACD,GAXM,CAAP;AAYD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => {\n            const observable = input[Symbol_observable]();\n            sub.add(observable.subscribe({\n                next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleObservable.js.map"]},"metadata":{},"sourceType":"module"}