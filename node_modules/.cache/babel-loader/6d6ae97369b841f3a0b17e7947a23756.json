{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return source => source.pipe(exhaustMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n  }\n\n  return source => source.lift(new ExhaustMapOperator(project));\n}\n\nclass ExhaustMapOperator {\n  constructor(project) {\n    this.project = project;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n\n}\n\nclass ExhaustMapSubscriber extends OuterSubscriber {\n  constructor(destination, project) {\n    super(destination);\n    this.project = project;\n    this.hasSubscription = false;\n    this.hasCompleted = false;\n    this.index = 0;\n  }\n\n  _next(value) {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  tryNext(value) {\n    let result;\n    const index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.hasSubscription = true;\n\n    this._innerSub(result, value, index);\n  }\n\n  _innerSub(result, value, index) {\n    const innerSubscriber = new InnerSubscriber(this, value, index);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    const innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  _complete() {\n    this.hasCompleted = true;\n\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err) {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub) {\n    const destination = this.destination;\n    destination.remove(innerSub);\n    this.hasSubscription = false;\n\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/exhaustMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        return (source) => source.pipe(exhaustMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new ExhaustMapOperator(project));\n}\nclass ExhaustMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    }\n}\nclass ExhaustMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    _next(value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    }\n    tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.hasSubscription = true;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, value, index);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(err) {\n        this.destination.error(err);\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=exhaustMap.js.map"]},"metadata":{},"sourceType":"module"}