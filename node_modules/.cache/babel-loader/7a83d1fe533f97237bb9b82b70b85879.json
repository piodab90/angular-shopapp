{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  let hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator {\n  constructor(accumulator, seed, hasSeed = false) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n\n}\n\nclass ScanSubscriber extends Subscriber {\n  constructor(destination, accumulator, _seed, hasSeed) {\n    super(destination);\n    this.accumulator = accumulator;\n    this._seed = _seed;\n    this.hasSeed = hasSeed;\n    this.index = 0;\n  }\n\n  get seed() {\n    return this._seed;\n  }\n\n  set seed(value) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  _next(value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  _tryNext(value) {\n    const index = this.index++;\n    let result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/scan.ts"],"names":[],"mappings":"AAEA,SAAS,UAAT,QAA2B,eAA3B;AAoDA,OAAM,SAAU,IAAV,CAAqB,WAArB,EAA0E,IAA1E,EAAsF;AAC1F,MAAI,OAAO,GAAG,KAAd;;AAMA,MAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,IAAA,OAAO,GAAG,IAAV;AACD;;AAED,SAAO,SAAS,oBAAT,CAA8B,MAA9B,EAAmD;AACxD,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,YAAJ,CAAiB,WAAjB,EAA8B,IAA9B,EAAoC,OAApC,CAAZ,CAAP;AACD,GAFD;AAGD;;AAED,MAAM,YAAN,CAAkB;AAChB,EAAA,WAAA,CAAoB,WAApB,EAAiF,IAAjF,EAAuG,OAAA,GAAmB,KAA1H,EAA+H;AAA3G,SAAA,WAAA,GAAA,WAAA;AAA6D,SAAA,IAAA,GAAA,IAAA;AAAsB,SAAA,OAAA,GAAA,OAAA;AAA4B;;AAEnI,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,KAAK,WAApC,EAAiD,KAAK,IAAtD,EAA4D,KAAK,OAAjE,CAAjB,CAAP;AACD;;AALe;;AAalB,MAAM,cAAN,SAAmC,UAAnC,CAAgD;AAY9C,EAAA,WAAA,CAAY,WAAZ,EAAgD,WAAhD,EAA6G,KAA7G,EACoB,OADpB,EACoC;AAClC,UAAM,WAAN;AAF8C,SAAA,WAAA,GAAA,WAAA;AAA6D,SAAA,KAAA,GAAA,KAAA;AACzF,SAAA,OAAA,GAAA,OAAA;AAZZ,SAAA,KAAA,GAAgB,CAAhB;AAcP;;AAZD,MAAI,IAAJ,GAAQ;AACN,WAAO,KAAK,KAAZ;AACD;;AAED,MAAI,IAAJ,CAAS,KAAT,EAAqB;AACnB,SAAK,OAAL,GAAe,IAAf;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAOS,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,WAAK,IAAL,GAAY,KAAZ;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD,KAHD,MAGO;AACL,aAAO,KAAK,QAAL,CAAc,KAAd,CAAP;AACD;AACF;;AAEO,EAAA,QAAQ,CAAC,KAAD,EAAS;AACvB,UAAM,KAAK,GAAG,KAAK,KAAL,EAAd;AACA,QAAI,MAAJ;;AACA,QAAI;AACF,MAAA,MAAM,GAAG,KAAK,WAAL,CAAoB,KAAK,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,CAAT;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACD;;AACD,SAAK,IAAL,GAAY,MAAZ;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACD;;AApC6C","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    let hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nclass ScanOperator {\n    constructor(accumulator, seed, hasSeed = false) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    }\n}\nclass ScanSubscriber extends Subscriber {\n    constructor(destination, accumulator, _seed, hasSeed) {\n        super(destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(value) {\n        this.hasSeed = true;\n        this._seed = value;\n    }\n    _next(value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    }\n    _tryNext(value) {\n        const index = this.index++;\n        let result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=scan.js.map"]},"metadata":{},"sourceType":"module"}