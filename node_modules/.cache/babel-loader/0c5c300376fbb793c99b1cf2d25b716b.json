{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n  return source => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n\n}\n\nclass SampleSubscriber extends OuterSubscriber {\n  constructor() {\n    super(...arguments);\n    this.hasValue = false;\n  }\n\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.emitValue();\n  }\n\n  notifyComplete() {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/sample.ts"],"names":[],"mappings":"AAGA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AA4CA,OAAM,SAAU,MAAV,CAAoB,QAApB,EAA6C;AACjD,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,QAAnB,CAAZ,CAAlC;AACD;;AAED,MAAM,cAAN,CAAoB;AAClB,EAAA,WAAA,CAAoB,QAApB,EAA6C;AAAzB,SAAA,QAAA,GAAA,QAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,UAAM,gBAAgB,GAAG,IAAI,gBAAJ,CAAqB,UAArB,CAAzB;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,gBAAjB,CAArB;AACA,IAAA,YAAY,CAAC,GAAb,CAAiB,iBAAiB,CAAC,gBAAD,EAAmB,KAAK,QAAxB,CAAlC;AACA,WAAO,YAAP;AACD;;AATiB;;AAiBpB,MAAM,gBAAN,SAAqC,eAArC,CAA0D;AAA1D,EAAA,WAAA,GAAA;;AAEU,SAAA,QAAA,GAAoB,KAApB;AAuBT;;AArBW,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,QAAL,GAAgB,IAAhB;AACD;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEgC;AACxC,SAAK,SAAL;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,SAAK,SAAL;AACD;;AAED,EAAA,SAAS,GAAA;AACP,QAAI,KAAK,QAAT,EAAmB;AACjB,WAAK,QAAL,GAAgB,KAAhB;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,KAA3B;AACD;AACF;;AAxBuD","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends OuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n//# sourceMappingURL=sample.js.map"]},"metadata":{},"sourceType":"module"}