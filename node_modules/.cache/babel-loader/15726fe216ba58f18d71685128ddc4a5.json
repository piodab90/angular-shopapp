{"ast":null,"code":"import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function onErrorResumeNext(...nextSources) {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  return source => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexport function onErrorResumeNextStatic(...nextSources) {\n  let source = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  source = nextSources.shift();\n  return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\n\nclass OnErrorResumeNextOperator {\n  constructor(nextSources) {\n    this.nextSources = nextSources;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n\n}\n\nclass OnErrorResumeNextSubscriber extends OuterSubscriber {\n  constructor(destination, nextSources) {\n    super(destination);\n    this.destination = destination;\n    this.nextSources = nextSources;\n  }\n\n  notifyError(error, innerSub) {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub) {\n    this.subscribeToNextSource();\n  }\n\n  _error(err) {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  subscribeToNextSource() {\n    const next = this.nextSources.shift();\n\n    if (!!next) {\n      const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n      const destination = this.destination;\n      destination.add(innerSubscriber);\n      const innerSubscription = subscribeToResult(this, next, undefined, undefined, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    } else {\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/onErrorResumeNext.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,QAAqB,oBAArB;AAIA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AAoFA,OAAM,SAAU,iBAAV,CAAkC,GAAG,WAArC,EAC6E;AACjF,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACvD,IAAA,WAAW,GAA2B,WAAW,CAAC,CAAD,CAAjD;AACD;;AAED,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,yBAAJ,CAAoC,WAApC,CAAZ,CAAlC;AACD;AAaD,OAAM,SAAU,uBAAV,CAAwC,GAAG,WAA3C,EAE2B;AAC/B,MAAI,MAAM,GAAyB,IAAnC;;AAEA,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACvD,IAAA,WAAW,GAAgC,WAAW,CAAC,CAAD,CAAtD;AACD;;AACD,EAAA,MAAM,GAAG,WAAW,CAAC,KAAZ,EAAT;AAEA,SAAO,IAAI,CAAC,MAAD,EAAS,IAAT,CAAJ,CAAmB,IAAnB,CAAwB,IAAI,yBAAJ,CAAoC,WAApC,CAAxB,CAAP;AACD;;AAED,MAAM,yBAAN,CAA+B;AAC7B,EAAA,WAAA,CAAoB,WAApB,EAA4D;AAAxC,SAAA,WAAA,GAAA,WAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,2BAAJ,CAAgC,UAAhC,EAA4C,KAAK,WAAjD,CAAjB,CAAP;AACD;;AAN4B;;AAS/B,MAAM,2BAAN,SAAgD,eAAhD,CAAqE;AACnE,EAAA,WAAA,CAAsB,WAAtB,EACoB,WADpB,EAC4D;AAC1D,UAAM,WAAN;AAFoB,SAAA,WAAA,GAAA,WAAA;AACF,SAAA,WAAA,GAAA,WAAA;AAEnB;;AAED,EAAA,WAAW,CAAC,KAAD,EAAa,QAAb,EAA8C;AACvD,SAAK,qBAAL;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAkC;AAC9C,SAAK,qBAAL;AACD;;AAES,EAAA,MAAM,CAAC,GAAD,EAAS;AACvB,SAAK,qBAAL;AACA,SAAK,WAAL;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,SAAK,qBAAL;AACA,SAAK,WAAL;AACD;;AAEO,EAAA,qBAAqB,GAAA;AAC3B,UAAM,IAAI,GAAG,KAAK,WAAL,CAAiB,KAAjB,EAAb;;AACA,QAAI,CAAC,CAAC,IAAN,EAAY;AACV,YAAM,eAAe,GAAG,IAAI,eAAJ,CAAoB,IAApB,EAA0B,SAA1B,EAAqC,SAArC,CAAxB;AACA,YAAM,WAAW,GAAG,KAAK,WAAzB;AACA,MAAA,WAAW,CAAC,GAAZ,CAAgB,eAAhB;AACA,YAAM,iBAAiB,GAAG,iBAAiB,CAAC,IAAD,EAAO,IAAP,EAAa,SAAb,EAAwB,SAAxB,EAAmC,eAAnC,CAA3C;;AAIA,UAAI,iBAAiB,KAAK,eAA1B,EAA2C;AACzC,QAAA,WAAW,CAAC,GAAZ,CAAgB,iBAAhB;AACD;AACF,KAXD,MAWO;AACL,WAAK,WAAL,CAAiB,QAAjB;AACD;AACF;;AAxCkE","sourcesContent":["import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function onErrorResumeNext(...nextSources) {\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexport function onErrorResumeNextStatic(...nextSources) {\n    let source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nclass OnErrorResumeNextOperator {\n    constructor(nextSources) {\n        this.nextSources = nextSources;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    }\n}\nclass OnErrorResumeNextSubscriber extends OuterSubscriber {\n    constructor(destination, nextSources) {\n        super(destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    notifyError(error, innerSub) {\n        this.subscribeToNextSource();\n    }\n    notifyComplete(innerSub) {\n        this.subscribeToNextSource();\n    }\n    _error(err) {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    _complete() {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    subscribeToNextSource() {\n        const next = this.nextSources.shift();\n        if (!!next) {\n            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n            const destination = this.destination;\n            destination.add(innerSubscriber);\n            const innerSubscription = subscribeToResult(this, next, undefined, undefined, innerSubscriber);\n            if (innerSubscription !== innerSubscriber) {\n                destination.add(innerSubscription);\n            }\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=onErrorResumeNext.js.map"]},"metadata":{},"sourceType":"module"}