{"ast":null,"code":"import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n  constructor(destinationOrNext, error, complete) {\n    super();\n    this.syncErrorValue = null;\n    this.syncErrorThrown = false;\n    this.syncErrorThrowable = false;\n    this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber(this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  [rxSubscriberSymbol]() {\n    return this;\n  }\n\n  static create(next, error, complete) {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  next(value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  error(err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  }\n\n  complete() {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  _next(value) {\n    this.destination.next(value);\n  }\n\n  _error(err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  _unsubscribeAndRecycle() {\n    const {\n      _parentOrParents\n    } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n\n}\nexport class SafeSubscriber extends Subscriber {\n  constructor(_parentSubscriber, observerOrNext, error, complete) {\n    super();\n    this._parentSubscriber = _parentSubscriber;\n    let next;\n    let context = this;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction(context.unsubscribe)) {\n          this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value) {\n    if (!this.isStopped && this._next) {\n      const {\n        _parentSubscriber\n      } = this;\n\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err) {\n    if (!this.isStopped) {\n      const {\n        _parentSubscriber\n      } = this;\n      const {\n        useDeprecatedSynchronousErrorHandling\n      } = config;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete() {\n    if (!this.isStopped) {\n      const {\n        _parentSubscriber\n      } = this;\n\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  __tryOrUnsub(fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  __tryOrSetError(parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _unsubscribe() {\n    const {\n      _parentSubscriber\n    } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  }\n\n}","map":{"version":3,"sources":["../../src/internal/Subscriber.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parentOrParents } = this;\n        this._parentOrParents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parentOrParents = _parentOrParents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map"]},"metadata":{},"sourceType":"module"}