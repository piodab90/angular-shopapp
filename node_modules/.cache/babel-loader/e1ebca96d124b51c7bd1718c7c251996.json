{"ast":null,"code":"import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n  return source => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator {\n  constructor(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n\n}\n\nclass RetryWhenSubscriber extends OuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  error(err) {\n    if (!this.isStopped) {\n      let errors = this.errors;\n      let retries = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          const {\n            notifier\n          } = this;\n          retries = notifier(errors);\n        } catch (e) {\n          return super.error(e);\n        }\n\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  }\n\n  _unsubscribe() {\n    const {\n      errors,\n      retriesSubscription\n    } = this;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/retryWhen.ts"],"names":[],"mappings":"AAGA,SAAS,OAAT,QAAwB,YAAxB;AAGA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAkBA,OAAM,SAAU,SAAV,CAAuB,QAAvB,EAA6E;AACjF,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,MAAhC,CAAZ,CAAlC;AACD;;AAED,MAAM,iBAAN,CAAuB;AACrB,EAAA,WAAA,CAAsB,QAAtB,EACsB,MADtB,EAC2C;AADrB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACrB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,QAAzC,EAAmD,KAAK,MAAxD,CAAjB,CAAP;AACD;;AAPoB;;AAevB,MAAM,mBAAN,SAAwC,eAAxC,CAA6D;AAM3D,EAAA,WAAA,CAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;AACvC,UAAM,WAAN;AAFkB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEnB;;AAED,EAAA,KAAK,CAAC,GAAD,EAAS;AACZ,QAAI,CAAC,KAAK,SAAV,EAAqB;AAEnB,UAAI,MAAM,GAAG,KAAK,MAAlB;AACA,UAAI,OAAO,GAAQ,KAAK,OAAxB;AACA,UAAI,mBAAmB,GAAG,KAAK,mBAA/B;;AAEA,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,MAAM,GAAG,IAAI,OAAJ,EAAT;;AACA,YAAI;AACF,gBAAM;AAAE,YAAA;AAAF,cAAe,IAArB;AACA,UAAA,OAAO,GAAG,QAAQ,CAAC,MAAD,CAAlB;AACD,SAHD,CAGE,OAAO,CAAP,EAAU;AACV,iBAAO,MAAM,KAAN,CAAY,CAAZ,CAAP;AACD;;AACD,QAAA,mBAAmB,GAAG,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAAvC;AACD,OATD,MASO;AACL,aAAK,MAAL,GAAc,IAAd;AACA,aAAK,mBAAL,GAA2B,IAA3B;AACD;;AAED,WAAK,sBAAL;;AAEA,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,OAAL,GAAe,OAAf;AACA,WAAK,mBAAL,GAA2B,mBAA3B;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;AACF;;AAGD,EAAA,YAAY,GAAA;AACV,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAkC,IAAxC;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,WAAP;AACA,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,QAAI,mBAAJ,EAAyB;AACvB,MAAA,mBAAmB,CAAC,WAApB;AACA,WAAK,mBAAL,GAA2B,IAA3B;AACD;;AACD,SAAK,OAAL,GAAe,IAAf;AACD;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEgC;AACxC,UAAM;AAAE,MAAA;AAAF,QAAmB,IAAzB;AAEA,SAAK,YAAL,GAAoB,IAApB;;AACA,SAAK,sBAAL;;AACA,SAAK,YAAL,GAAoB,YAApB;AAEA,SAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;AACD;;AAnE0D","sourcesContent":["import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends OuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map"]},"metadata":{},"sourceType":"module"}