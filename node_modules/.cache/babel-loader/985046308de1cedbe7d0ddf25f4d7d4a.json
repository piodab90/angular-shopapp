{"ast":null,"code":"import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n  constructor(destination) {\n    super(destination);\n    this.destination = destination;\n  }\n\n}\nexport class Subject extends Observable {\n  constructor() {\n    super();\n    this.observers = [];\n    this.closed = false;\n    this.isStopped = false;\n    this.hasError = false;\n    this.thrownError = null;\n  }\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  lift(operator) {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  }\n\n  next(value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    if (!this.isStopped) {\n      const {\n        observers\n      } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const {\n      observers\n    } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.isStopped = true;\n    const {\n      observers\n    } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  _trySubscribe(subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  _subscribe(subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable() {\n    const observable = new Observable();\n    observable.source = this;\n    return observable;\n  }\n\n}\n\nSubject.create = (destination, source) => {\n  return new AnonymousSubject(destination, source);\n};\n\nexport class AnonymousSubject extends Subject {\n  constructor(destination, source) {\n    super();\n    this.destination = destination;\n    this.source = source;\n  }\n\n  next(value) {\n    const {\n      destination\n    } = this;\n\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err) {\n    const {\n      destination\n    } = this;\n\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const {\n      destination\n    } = this;\n\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/internal/Subject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.destination = destination;\n    }\n}\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n        return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    next(value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            const { observers } = this;\n            const len = observers.length;\n            const copy = observers.slice();\n            for (let i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    }\n    error(err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    }\n    complete() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    }\n    unsubscribe() {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return super._trySubscribe(subscriber);\n        }\n    }\n    _subscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        const { destination } = this;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    }\n    error(err) {\n        const { destination } = this;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    }\n    complete() {\n        const { destination } = this;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    }\n}\n//# sourceMappingURL=Subject.js.map"]},"metadata":{},"sourceType":"module"}