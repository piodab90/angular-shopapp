{"ast":null,"code":"import { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race(...observables) {\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\nexport class RaceOperator {\n  call(subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n\n}\nexport class RaceSubscriber extends OuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.hasFirst = false;\n    this.observables = [];\n    this.subscriptions = [];\n  }\n\n  _next(observable) {\n    this.observables.push(observable);\n  }\n\n  _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n\n        this.add(subscription);\n      }\n\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/observable/race.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,SAAT,QAA0B,aAA1B;AAKA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAoDA,OAAM,SAAU,IAAV,CAAkB,GAAG,WAArB,EAAwD;AAG5D,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,QAAI,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAX,EAA6B;AAC3B,MAAA,WAAW,GAAG,WAAW,CAAC,CAAD,CAAzB;AACD,KAFD,MAEO;AACL,aAAO,WAAW,CAAC,CAAD,CAAlB;AACD;AACF;;AAED,SAAO,SAAS,CAAC,WAAD,EAAc,SAAd,CAAT,CAAkC,IAAlC,CAAuC,IAAI,YAAJ,EAAvC,CAAP;AACD;AAED,OAAM,MAAO,YAAP,CAAmB;AACvB,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,cAAJ,CAAmB,UAAnB,CAAjB,CAAP;AACD;;AAHsB;AAWzB,OAAM,MAAO,cAAP,SAAiC,eAAjC,CAAsD;AAK1D,EAAA,WAAA,CAAY,WAAZ,EAAsC;AACpC,UAAM,WAAN;AALM,SAAA,QAAA,GAAoB,KAApB;AACA,SAAA,WAAA,GAAiC,EAAjC;AACA,SAAA,aAAA,GAAgC,EAAhC;AAIP;;AAES,EAAA,KAAK,CAAC,UAAD,EAAgB;AAC7B,SAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,UAAM,GAAG,GAAG,WAAW,CAAC,MAAxB;;AAEA,QAAI,GAAG,KAAK,CAAZ,EAAe;AACb,WAAK,WAAL,CAAiB,QAAjB;AACD,KAFD,MAEO;AACL,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAJ,IAAW,CAAC,KAAK,QAAjC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C,YAAI,UAAU,GAAG,WAAW,CAAC,CAAD,CAA5B;AACA,YAAI,YAAY,GAAG,iBAAiB,CAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,EAAsC,CAAtC,CAApC;;AAEA,YAAI,KAAK,aAAT,EAAwB;AACtB,eAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAxB;AACD;;AACD,aAAK,GAAL,CAAS,YAAT;AACD;;AACD,WAAK,WAAL,GAAmB,IAAnB;AACD;AACF;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEgC;AACxC,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,QAAL,GAAgB,IAAhB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,aAAL,CAAmB,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,YAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,cAAI,YAAY,GAAG,KAAK,aAAL,CAAmB,CAAnB,CAAnB;AAEA,UAAA,YAAY,CAAC,WAAb;AACA,eAAK,MAAL,CAAY,YAAZ;AACD;AACF;;AAED,WAAK,aAAL,GAAqB,IAArB;AACD;;AAED,SAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACD;;AApDyD","sourcesContent":["import { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race(...observables) {\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nexport class RaceOperator {\n    call(subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    }\n}\nexport class RaceSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    _next(observable) {\n        this.observables.push(observable);\n    }\n    _complete() {\n        const observables = this.observables;\n        const len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (let i = 0; i < len && !this.hasFirst; i++) {\n                let observable = observables[i];\n                let subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (let i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    let subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=race.js.map"]},"metadata":{},"sourceType":"module"}