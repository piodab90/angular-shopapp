{"ast":null,"code":"import { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator {\n  constructor(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n\n}\n\nclass BufferWhenSubscriber extends OuterSubscriber {\n  constructor(destination, closingSelector) {\n    super(destination);\n    this.closingSelector = closingSelector;\n    this.subscribing = false;\n    this.openBuffer();\n  }\n\n  _next(value) {\n    this.buffer.push(value);\n  }\n\n  _complete() {\n    const buffer = this.buffer;\n\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openBuffer();\n  }\n\n  notifyComplete() {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n    let {\n      closingSubscription\n    } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n    let closingNotifier;\n\n    try {\n      const {\n        closingSelector\n      } = this;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(subscribeToResult(this, closingNotifier));\n    this.subscribing = false;\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/bufferWhen.ts"],"names":[],"mappings":"AAGA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AA6CA,OAAM,SAAU,UAAV,CAAwB,eAAxB,EAA8D;AAClE,SAAO,UAAU,MAAV,EAA+B;AACpC,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,kBAAJ,CAAuB,eAAvB,CAAZ,CAAP;AACD,GAFD;AAGD;;AAED,MAAM,kBAAN,CAAwB;AAEtB,EAAA,WAAA,CAAoB,eAApB,EAA0D;AAAtC,SAAA,eAAA,GAAA,eAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA8B,MAA9B,EAAyC;AAC3C,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,oBAAJ,CAAyB,UAAzB,EAAqC,KAAK,eAA1C,CAAjB,CAAP;AACD;;AAPqB;;AAexB,MAAM,oBAAN,SAAsC,eAAtC,CAA6D;AAK3D,EAAA,WAAA,CAAY,WAAZ,EAAkD,eAAlD,EAAwF;AACtF,UAAM,WAAN;AADgD,SAAA,eAAA,GAAA,eAAA;AAH1C,SAAA,WAAA,GAAuB,KAAvB;AAKN,SAAK,UAAL;AACD;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,UAAM,MAAM,GAAG,KAAK,MAApB;;AACA,QAAI,MAAJ,EAAY;AACV,WAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACD;;AACD,UAAM,SAAN;AACD;;AAGD,EAAA,YAAY,GAAA;AACV,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,WAAL,GAAmB,KAAnB;AACD;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEkC;AAC1C,SAAK,UAAL;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,QAAL;AACD,KAFD,MAEO;AACL,WAAK,UAAL;AACD;AACF;;AAED,EAAA,UAAU,GAAA;AACR,QAAI;AAAE,MAAA;AAAF,QAA0B,IAA9B;;AAEA,QAAI,mBAAJ,EAAyB;AACvB,WAAK,MAAL,CAAY,mBAAZ;AACA,MAAA,mBAAmB,CAAC,WAApB;AACD;;AAED,UAAM,MAAM,GAAG,KAAK,MAApB;;AACA,QAAI,KAAK,MAAT,EAAiB;AACf,WAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACD;;AAED,SAAK,MAAL,GAAc,EAAd;AAEA,QAAI,eAAJ;;AACA,QAAI;AACF,YAAM;AAAE,QAAA;AAAF,UAAsB,IAA5B;AACA,MAAA,eAAe,GAAG,eAAe,EAAjC;AACD,KAHD,CAGE,OAAO,GAAP,EAAY;AACZ,aAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACD;;AACD,IAAA,mBAAmB,GAAG,IAAI,YAAJ,EAAtB;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACA,SAAK,GAAL,CAAS,mBAAT;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,IAAA,mBAAmB,CAAC,GAApB,CAAwB,iBAAiB,CAAC,IAAD,EAAO,eAAP,CAAzC;AACA,SAAK,WAAL,GAAmB,KAAnB;AACD;;AAtE0D","sourcesContent":["import { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass BufferWhenSubscriber extends OuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.buffer = null;\n        this.subscribing = false;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    }\n    notifyComplete() {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    }\n    openBuffer() {\n        let { closingSubscription } = this;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (err) {\n            return this.error(err);\n        }\n        closingSubscription = new Subscription();\n        this.closingSubscription = closingSubscription;\n        this.add(closingSubscription);\n        this.subscribing = true;\n        closingSubscription.add(subscribeToResult(this, closingNotifier));\n        this.subscribing = false;\n    }\n}\n//# sourceMappingURL=bufferWhen.js.map"]},"metadata":{},"sourceType":"module"}