{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\nexport class ObserveOnOperator {\n  constructor(scheduler, delay = 0) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n\n}\nexport class ObserveOnSubscriber extends Subscriber {\n  constructor(destination, scheduler, delay = 0) {\n    super(destination);\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  static dispatch(arg) {\n    const {\n      notification,\n      destination\n    } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  scheduleMessage(notification) {\n    const destination = this.destination;\n    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  }\n\n  _next(value) {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  _error(err) {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n\n}\nexport class ObserveOnMessage {\n  constructor(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/observeOn.ts"],"names":[],"mappings":"AAEA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AAuDA,OAAM,SAAU,SAAV,CAAuB,SAAvB,EAAiD,KAAA,GAAgB,CAAjE,EAAkE;AACtE,SAAO,SAAS,yBAAT,CAAmC,MAAnC,EAAwD;AAC7D,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,SAAtB,EAAiC,KAAjC,CAAZ,CAAP;AACD,GAFD;AAGD;AAED,OAAM,MAAO,iBAAP,CAAwB;AAC5B,EAAA,WAAA,CAAoB,SAApB,EAAsD,KAAA,GAAgB,CAAtE,EAAuE;AAAnD,SAAA,SAAA,GAAA,SAAA;AAAkC,SAAA,KAAA,GAAA,KAAA;AACrD;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,SAAzC,EAAoD,KAAK,KAAzD,CAAjB,CAAP;AACD;;AAN2B;AAc9B,OAAM,MAAO,mBAAP,SAAsC,UAAtC,CAAmD;AAQvD,EAAA,WAAA,CAAY,WAAZ,EACoB,SADpB,EAEoB,KAAA,GAAgB,CAFpC,EAEqC;AACnC,UAAM,WAAN;AAFkB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,KAAA,GAAA,KAAA;AAEnB;;AAVD,SAAO,QAAP,CAAyD,GAAzD,EAA8E;AAC5E,UAAM;AAAE,MAAA,YAAF;AAAgB,MAAA;AAAhB,QAAgC,GAAtC;AACA,IAAA,YAAY,CAAC,OAAb,CAAqB,WAArB;AACA,SAAK,WAAL;AACD;;AAQO,EAAA,eAAe,CAAC,YAAD,EAAgC;AACrD,UAAM,WAAW,GAAG,KAAK,WAAzB;AACA,IAAA,WAAW,CAAC,GAAZ,CAAgB,KAAK,SAAL,CAAe,QAAf,CACd,mBAAmB,CAAC,QADN,EAEd,KAAK,KAFS,EAGd,IAAI,gBAAJ,CAAqB,YAArB,EAAmC,KAAK,WAAxC,CAHc,CAAhB;AAKD;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,SAAK,eAAL,CAAqB,YAAY,CAAC,UAAb,CAAwB,KAAxB,CAArB;AACD;;AAES,EAAA,MAAM,CAAC,GAAD,EAAS;AACvB,SAAK,eAAL,CAAqB,YAAY,CAAC,WAAb,CAAyB,GAAzB,CAArB;AACA,SAAK,WAAL;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,SAAK,eAAL,CAAqB,YAAY,CAAC,cAAb,EAArB;AACA,SAAK,WAAL;AACD;;AAnCsD;AAsCzD,OAAM,MAAO,gBAAP,CAAuB;AAC3B,EAAA,WAAA,CAAmB,YAAnB,EACmB,WADnB,EACoD;AADjC,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAClB;;AAH0B","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n//# sourceMappingURL=observeOn.js.map"]},"metadata":{},"sourceType":"module"}