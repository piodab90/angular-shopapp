{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return source => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n  constructor(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n\n}\nexport class ExpandSubscriber extends OuterSubscriber {\n  constructor(destination, project, concurrent, scheduler) {\n    super(destination);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n    this.index = 0;\n    this.active = 0;\n    this.hasCompleted = false;\n\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  static dispatch(arg) {\n    const {\n      subscriber,\n      result,\n      value,\n      index\n    } = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  _next(value) {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n\n      return;\n    }\n\n    const index = this.index++;\n\n    if (this.active < this.concurrent) {\n      destination.next(value);\n\n      try {\n        const {\n          project\n        } = this;\n        const result = project(value, index);\n\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          const state = {\n            subscriber: this,\n            result,\n            value,\n            index\n          };\n          const destination = this.destination;\n          destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  subscribeToProjection(result, value, index) {\n    this.active++;\n    const destination = this.destination;\n    destination.add(subscribeToResult(this, result, value, index));\n  }\n\n  _complete() {\n    this.hasCompleted = true;\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub) {\n    const buffer = this.buffer;\n    const destination = this.destination;\n    destination.remove(innerSub);\n    this.active--;\n\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(subscribeToResult(this, result, value, index));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=expand.js.map"]},"metadata":{},"sourceType":"module"}