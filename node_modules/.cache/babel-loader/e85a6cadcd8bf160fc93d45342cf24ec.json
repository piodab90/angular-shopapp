{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    subscriber.add(scheduler.schedule(dispatch, period, {\n      subscriber,\n      counter: 0,\n      period\n    }));\n    return subscriber;\n  });\n}\n\nfunction dispatch(state) {\n  const {\n    subscriber,\n    counter,\n    period\n  } = state;\n  subscriber.next(counter);\n  this.schedule({\n    subscriber,\n    counter: counter + 1,\n    period\n  }, period);\n}","map":{"version":3,"sources":["../../../src/internal/observable/interval.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,KAAT,QAAsB,oBAAtB;AAEA,SAAS,SAAT,QAA0B,mBAA1B;AAmDA,OAAM,SAAU,QAAV,CAAmB,MAAM,GAAG,CAA5B,EACmB,SAAA,GAA2B,KAD9C,EACmD;AACvD,MAAI,CAAC,SAAS,CAAC,MAAD,CAAV,IAAsB,MAAM,GAAG,CAAnC,EAAsC;AACpC,IAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAI,CAAC,SAAD,IAAc,OAAO,SAAS,CAAC,QAAjB,KAA8B,UAAhD,EAA4D;AAC1D,IAAA,SAAS,GAAG,KAAZ;AACD;;AAED,SAAO,IAAI,UAAJ,CAAuB,UAAU,IAAG;AACzC,IAAA,UAAU,CAAC,GAAX,CACE,SAAS,CAAC,QAAV,CAAmB,QAAnB,EAA6B,MAA7B,EAAqC;AAAE,MAAA,UAAF;AAAc,MAAA,OAAO,EAAE,CAAvB;AAA0B,MAAA;AAA1B,KAArC,CADF;AAGA,WAAO,UAAP;AACD,GALM,CAAP;AAMD;;AAED,SAAS,QAAT,CAAwD,KAAxD,EAA4E;AAC1E,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,OAAd;AAAuB,IAAA;AAAvB,MAAkC,KAAxC;AACA,EAAA,UAAU,CAAC,IAAX,CAAgB,OAAhB;AACA,OAAK,QAAL,CAAc;AAAE,IAAA,UAAF;AAAc,IAAA,OAAO,EAAE,OAAO,GAAG,CAAjC;AAAoC,IAAA;AAApC,GAAd,EAA4D,MAA5D;AACD","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map"]},"metadata":{},"sourceType":"module"}