{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return source => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator {\n  constructor(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n\n}\n\nclass TakeSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.count = 0;\n  }\n\n  _next(value) {\n    const total = this.total;\n    const count = ++this.count;\n\n    if (count <= total) {\n      this.destination.next(value);\n\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/take.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,uBAAT,QAAwC,iCAAxC;AACA,SAAS,KAAT,QAAsB,qBAAtB;AAkDA,OAAM,SAAU,IAAV,CAAkB,KAAlB,EAA+B;AACnC,SAAQ,MAAD,IAA0B;AAC/B,QAAI,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,KAAK,EAAZ;AACD,KAFD,MAEO;AACL,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,YAAJ,CAAiB,KAAjB,CAAZ,CAAP;AACD;AACF,GAND;AAOD;;AAED,MAAM,YAAN,CAAkB;AAChB,EAAA,WAAA,CAAoB,KAApB,EAAiC;AAAb,SAAA,KAAA,GAAA,KAAA;;AAClB,QAAI,KAAK,KAAL,GAAa,CAAjB,EAAoB;AAClB,YAAM,IAAI,uBAAJ,EAAN;AACD;AACF;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,KAAK,KAApC,CAAjB,CAAP;AACD;;AATe;;AAiBlB,MAAM,cAAN,SAAgC,UAAhC,CAA6C;AAG3C,EAAA,WAAA,CAAY,WAAZ,EAAgD,KAAhD,EAA6D;AAC3D,UAAM,WAAN;AAD8C,SAAA,KAAA,GAAA,KAAA;AAFxC,SAAA,KAAA,GAAgB,CAAhB;AAIP;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,KAAK,GAAG,EAAE,KAAK,KAArB;;AACA,QAAI,KAAK,IAAI,KAAb,EAAoB;AAClB,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;;AACA,UAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,aAAK,WAAL,CAAiB,QAAjB;AACA,aAAK,WAAL;AACD;AACF;AACF;;AAjB0C","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map"]},"metadata":{},"sourceType":"module"}