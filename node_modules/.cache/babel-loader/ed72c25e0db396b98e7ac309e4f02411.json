{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function distinct(keySelector, flushes) {\n  return source => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator {\n  constructor(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n\n}\n\nexport class DistinctSubscriber extends OuterSubscriber {\n  constructor(destination, keySelector, flushes) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.values = new Set();\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values.clear();\n  }\n\n  notifyError(error, innerSub) {\n    this._error(error);\n  }\n\n  _next(value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  _useKeySelector(value) {\n    let key;\n    const {\n      destination\n    } = this;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this._finalizeNext(key, value);\n  }\n\n  _finalizeNext(key, value) {\n    const {\n      values\n    } = this;\n\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/distinct.ts"],"names":[],"mappings":"AAGA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AA6DA,OAAM,SAAU,QAAV,CAAyB,WAAzB,EACyB,OADzB,EACkD;AACtD,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,gBAAJ,CAAqB,WAArB,EAAkC,OAAlC,CAAZ,CAAlC;AACD;;AAED,MAAM,gBAAN,CAAsB;AACpB,EAAA,WAAA,CAAoB,WAApB,EAA0D,OAA1D,EAAkF;AAA9D,SAAA,WAAA,GAAA,WAAA;AAAsC,SAAA,OAAA,GAAA,OAAA;AACzD;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,KAAK,WAAxC,EAAqD,KAAK,OAA1D,CAAjB,CAAP;AACD;;AANmB;;AActB,OAAM,MAAO,kBAAP,SAAwC,eAAxC,CAA6D;AAGjE,EAAA,WAAA,CAAY,WAAZ,EAAgD,WAAhD,EAA8E,OAA9E,EAAsG;AACpG,UAAM,WAAN;AAD8C,SAAA,WAAA,GAAA,WAAA;AAFxC,SAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;;AAKN,QAAI,OAAJ,EAAa;AACX,WAAK,GAAL,CAAS,iBAAiB,CAAC,IAAD,EAAO,OAAP,CAA1B;AACD;AACF;;AAED,EAAA,UAAU,CAAC,UAAD,EAAgB,UAAhB,EACC,UADD,EACqB,UADrB,EAEC,QAFD,EAEgC;AACxC,SAAK,MAAL,CAAY,KAAZ;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAa,QAAb,EAA4C;AACrD,SAAK,MAAL,CAAY,KAAZ;AACD;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,eAAL,CAAqB,KAArB;AACD,KAFD,MAEO;AACL,WAAK,aAAL,CAAmB,KAAnB,EAA0B,KAA1B;AACD;AACF;;AAEO,EAAA,eAAe,CAAC,KAAD,EAAS;AAC9B,QAAI,GAAJ;AACA,UAAM;AAAE,MAAA;AAAF,QAAkB,IAAxB;;AACA,QAAI;AACF,MAAA,GAAG,GAAG,KAAK,WAAL,CAAiB,KAAjB,CAAN;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,MAAA,WAAW,CAAC,KAAZ,CAAkB,GAAlB;AACA;AACD;;AACD,SAAK,aAAL,CAAmB,GAAnB,EAAwB,KAAxB;AACD;;AAEO,EAAA,aAAa,CAAC,GAAD,EAAW,KAAX,EAAmB;AACtC,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;;AACA,QAAI,CAAC,MAAM,CAAC,GAAP,CAAc,GAAd,CAAL,EAAyB;AACvB,MAAA,MAAM,CAAC,GAAP,CAAc,GAAd;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD;AACF;;AA/CgE","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function distinct(keySelector, flushes) {\n    return (source) => source.lift(new DistinctOperator(keySelector, flushes));\n}\nclass DistinctOperator {\n    constructor(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    }\n}\nexport class DistinctSubscriber extends OuterSubscriber {\n    constructor(destination, keySelector, flushes) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.values = new Set();\n        if (flushes) {\n            this.add(subscribeToResult(this, flushes));\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    _next(value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    }\n    _useKeySelector(value) {\n        let key;\n        const { destination } = this;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    }\n    _finalizeNext(key, value) {\n        const { values } = this;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinct.js.map"]},"metadata":{},"sourceType":"module"}