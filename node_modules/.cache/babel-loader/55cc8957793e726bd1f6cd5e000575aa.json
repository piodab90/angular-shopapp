{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return source => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nclass GroupByOperator {\n  constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  }\n\n}\n\nclass GroupBySubscriber extends Subscriber {\n  constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n    this.groups = null;\n    this.attemptedToUnsubscribe = false;\n    this.count = 0;\n  }\n\n  _next(value) {\n    let key;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  _group(value, key) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n\n    let group = groups.get(key);\n    let element;\n\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n\n      if (this.durationSelector) {\n        let duration;\n\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  _error(err) {\n    const groups = this.groups;\n\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n      groups.clear();\n    }\n\n    this.destination.error(err);\n  }\n\n  _complete() {\n    const groups = this.groups;\n\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n      groups.clear();\n    }\n\n    this.destination.complete();\n  }\n\n  removeGroup(key) {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n\n}\n\nclass GroupDurationSubscriber extends Subscriber {\n  constructor(key, group, parent) {\n    super(group);\n    this.key = key;\n    this.group = group;\n    this.parent = parent;\n  }\n\n  _next(value) {\n    this.complete();\n  }\n\n  _unsubscribe() {\n    const {\n      parent,\n      key\n    } = this;\n    this.key = this.parent = null;\n\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n\n}\n\nexport class GroupedObservable extends Observable {\n  constructor(key, groupSubject, refCountSubscription) {\n    super();\n    this.key = key;\n    this.groupSubject = groupSubject;\n    this.refCountSubscription = refCountSubscription;\n  }\n\n  _subscribe(subscriber) {\n    const subscription = new Subscription();\n    const {\n      refCountSubscription,\n      groupSubject\n    } = this;\n\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n\n}\n\nclass InnerRefCountSubscription extends Subscription {\n  constructor(parent) {\n    super();\n    this.parent = parent;\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n}\nclass GroupBySubscriber extends Subscriber {\n    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    _next(value) {\n        let key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    }\n    _group(value, key) {\n        let groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        let group = groups.get(key);\n        let element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            const groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                let duration;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    }\n    _error(err) {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    }\n    removeGroup(key) {\n        this.groups.delete(key);\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                super.unsubscribe();\n            }\n        }\n    }\n}\nclass GroupDurationSubscriber extends Subscriber {\n    constructor(key, group, parent) {\n        super(group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    _next(value) {\n        this.complete();\n    }\n    _unsubscribe() {\n        const { parent, key } = this;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    }\n}\nexport class GroupedObservable extends Observable {\n    constructor(key, groupSubject, refCountSubscription) {\n        super();\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    _subscribe(subscriber) {\n        const subscription = new Subscription();\n        const { refCountSubscription, groupSubject } = this;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    }\n}\nclass InnerRefCountSubscription extends Subscription {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        parent.count++;\n    }\n    unsubscribe() {\n        const parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            super.unsubscribe();\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}