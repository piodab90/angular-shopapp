{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return source => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator {\n  constructor(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n\n}\n\nclass CountSubscriber extends Subscriber {\n  constructor(destination, predicate, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.count = 0;\n    this.index = 0;\n  }\n\n  _next(value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  _tryPredicate(value) {\n    let result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  _complete() {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":"AAGA,SAAS,UAAT,QAA2B,eAA3B;AA6DA,OAAM,SAAU,KAAV,CAAmB,SAAnB,EAA0F;AAC9F,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,SAAlB,EAA6B,MAA7B,CAAZ,CAAlC;AACD;;AAED,MAAM,aAAN,CAAmB;AACjB,EAAA,WAAA,CAAoB,SAApB,EACoB,MADpB,EAC0C;AADtB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAAiC,MAAjC,EAA4C;AAC9C,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,SAArC,EAAgD,KAAK,MAArD,CAAjB,CAAP;AACD;;AAPgB;;AAenB,MAAM,eAAN,SAAiC,UAAjC,CAA8C;AAI5C,EAAA,WAAA,CAAY,WAAZ,EACoB,SADpB,EAEoB,MAFpB,EAE0C;AACxC,UAAM,WAAN;AAFkB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,MAAA,GAAA,MAAA;AALZ,SAAA,KAAA,GAAgB,CAAhB;AACA,SAAA,KAAA,GAAgB,CAAhB;AAMP;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,aAAL,CAAmB,KAAnB;AACD,KAFD,MAEO;AACL,WAAK,KAAL;AACD;AACF;;AAEO,EAAA,aAAa,CAAC,KAAD,EAAS;AAC5B,QAAI,MAAJ;;AAEA,QAAI;AACF,MAAA,MAAM,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,KAAK,KAAL,EAAtB,EAAoC,KAAK,MAAzC,CAAT;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACA;AACD;;AAED,QAAI,MAAJ,EAAY;AACV,WAAK,KAAL;AACD;AACF;;AAES,EAAA,SAAS,GAAA;AACjB,SAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,KAA3B;AACA,SAAK,WAAL,CAAiB,QAAjB;AACD;;AApC2C","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return (source) => source.lift(new CountOperator(predicate, source));\n}\nclass CountOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass CountSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    }\n    _tryPredicate(value) {\n        let result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    }\n    _complete() {\n        this.destination.next(this.count);\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=count.js.map"]},"metadata":{},"sourceType":"module"}