{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return source => new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n  }\n\n  return source => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator {\n  constructor(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n\n}\n\nclass DelayWhenSubscriber extends OuterSubscriber {\n  constructor(destination, delayDurationSelector) {\n    super(destination);\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.index = 0;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error, innerSub) {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub) {\n    const value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  }\n\n  _next(value) {\n    const index = this.index++;\n\n    try {\n      const delayNotifier = this.delayDurationSelector(value, index);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  _complete() {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  }\n\n  removeSubscription(subscription) {\n    subscription.unsubscribe();\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  }\n\n  tryDelay(delayNotifier, value) {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      const destination = this.destination;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n\n  tryComplete() {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n}\n\nclass SubscriptionDelayObservable extends Observable {\n  constructor(source, subscriptionDelay) {\n    super();\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n\n  _subscribe(subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n\n}\n\nclass SubscriptionDelaySubscriber extends Subscriber {\n  constructor(parent, source) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n\n  _next(unused) {\n    this.subscribeToSource();\n  }\n\n  _error(err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  _complete() {\n    this.unsubscribe();\n    this.subscribeToSource();\n  }\n\n  subscribeToSource() {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/delayWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n//# sourceMappingURL=delayWhen.js.map"]},"metadata":{},"sourceType":"module"}