{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n  return source => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator {\n  constructor(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n\n}\n\nclass DistinctUntilChangedSubscriber extends Subscriber {\n  constructor(destination, compare, keySelector) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.hasKey = false;\n\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  compare(x, y) {\n    return x === y;\n  }\n\n  _next(value) {\n    let key;\n\n    try {\n      const {\n        keySelector\n      } = this;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n\n    let result = false;\n\n    if (this.hasKey) {\n      try {\n        const {\n          compare\n        } = this;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/distinctUntilChanged.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AA8DA,OAAM,SAAU,oBAAV,CAAqC,OAArC,EAAwE,WAAxE,EAAiG;AACrG,SAAQ,MAAD,IAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,4BAAJ,CAAuC,OAAvC,EAAgD,WAAhD,CAAZ,CAAlC;AACD;;AAED,MAAM,4BAAN,CAAkC;AAChC,EAAA,WAAA,CAAoB,OAApB,EACoB,WADpB,EAC4C;AADxB,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACnB;;AAED,EAAA,IAAI,CAAC,UAAD,EAA4B,MAA5B,EAAuC;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,8BAAJ,CAAmC,UAAnC,EAA+C,KAAK,OAApD,EAA6D,KAAK,WAAlE,CAAjB,CAAP;AACD;;AAP+B;;AAelC,MAAM,8BAAN,SAAmD,UAAnD,CAAgE;AAI9D,EAAA,WAAA,CAAY,WAAZ,EACY,OADZ,EAEoB,WAFpB,EAE4C;AAC1C,UAAM,WAAN;AADkB,SAAA,WAAA,GAAA,WAAA;AAJZ,SAAA,MAAA,GAAkB,KAAlB;;AAMN,QAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAK,OAAL,GAAe,OAAf;AACD;AACF;;AAEO,EAAA,OAAO,CAAC,CAAD,EAAS,CAAT,EAAe;AAC5B,WAAO,CAAC,KAAK,CAAb;AACD;;AAES,EAAA,KAAK,CAAC,KAAD,EAAS;AACtB,QAAI,GAAJ;;AACA,QAAI;AACF,YAAM;AAAE,QAAA;AAAF,UAAkB,IAAxB;AACA,MAAA,GAAG,GAAG,WAAW,GAAG,WAAW,CAAC,KAAD,CAAd,GAAwB,KAAzC;AACD,KAHD,CAGE,OAAO,GAAP,EAAY;AACZ,aAAO,KAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB,CAAP;AACD;;AACD,QAAI,MAAM,GAAG,KAAb;;AACA,QAAI,KAAK,MAAT,EAAiB;AACf,UAAI;AACF,cAAM;AAAE,UAAA;AAAF,YAAc,IAApB;AACA,QAAA,MAAM,GAAG,OAAO,CAAC,KAAK,GAAN,EAAW,GAAX,CAAhB;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,eAAO,KAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB,CAAP;AACD;AACF,KAPD,MAOO;AACL,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,QAAI,CAAC,MAAL,EAAa;AACX,WAAK,GAAL,GAAW,GAAX;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD;AACF;;AAxC6D","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinctUntilChanged.js.map"]},"metadata":{},"sourceType":"module"}