{"ast":null,"code":"import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n  constructor(source, subjectFactory) {\n    super();\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    this._refCount = 0;\n    this._isComplete = false;\n  }\n\n  _subscribe(subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  getSubject() {\n    const subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  }\n\n  connect() {\n    let connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  }\n\n  refCount() {\n    return higherOrderRefCount()(this);\n  }\n\n}\nexport const connectableObservableDescriptor = (() => {\n  const connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n})();\n\nclass ConnectableSubscriber extends SubjectSubscriber {\n  constructor(destination, connectable) {\n    super(destination);\n    this.connectable = connectable;\n  }\n\n  _error(err) {\n    this._unsubscribe();\n\n    super._error(err);\n  }\n\n  _complete() {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    const connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n\n}\n\nclass RefCountOperator {\n  constructor(connectable) {\n    this.connectable = connectable;\n  }\n\n  call(subscriber, source) {\n    const {\n      connectable\n    } = this;\n    connectable._refCount++;\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n\n}\n\nclass RefCountSubscriber extends Subscriber {\n  constructor(destination, connectable) {\n    super(destination);\n    this.connectable = connectable;\n  }\n\n  _unsubscribe() {\n    const {\n      connectable\n    } = this;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    const {\n      connection\n    } = this;\n    const sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}