{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function switchMap(project, resultSelector) {\n  if (typeof resultSelector === 'function') {\n    return source => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n  }\n\n  return source => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator {\n  constructor(project) {\n    this.project = project;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n\n}\n\nclass SwitchMapSubscriber extends OuterSubscriber {\n  constructor(destination, project) {\n    super(destination);\n    this.project = project;\n    this.index = 0;\n  }\n\n  _next(value) {\n    let result;\n    const index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n\n    this._innerSub(result, value, index);\n  }\n\n  _innerSub(result, value, index) {\n    const innerSubscription = this.innerSubscription;\n\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n\n    const innerSubscriber = new InnerSubscriber(this, value, index);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    this.innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  }\n\n  _complete() {\n    const {\n      innerSubscription\n    } = this;\n\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n\n    this.unsubscribe();\n  }\n\n  _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub) {\n    const destination = this.destination;\n    destination.remove(innerSub);\n    this.innerSubscription = null;\n\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(innerValue);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/operators/switchMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new InnerSubscriber(this, value, index);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n        if (this.innerSubscription !== innerSubscriber) {\n            destination.add(this.innerSubscription);\n        }\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = null;\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map"]},"metadata":{},"sourceType":"module"}