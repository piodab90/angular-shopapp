{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { CartItems } from './cartItems';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./item.service\";\nexport class CartService {\n  constructor(itemService) {\n    this.itemService = itemService;\n    this.itemsInCart = new Array();\n    this.observableItemsInCart = new BehaviorSubject(this.itemsInCart);\n  }\n\n  getItemsInCart() {\n    return this.observableItemsInCart.asObservable();\n  }\n\n  addItemToCart(item, amountOfItems) {\n    let isItemAlreadyInCart = false;\n    this.itemService.updateItemQuantity(item, -amountOfItems);\n    this.itemsInCart.forEach(itemInCart => {\n      if (itemInCart.item.id === item.id) {\n        itemInCart.amount += amountOfItems;\n        isItemAlreadyInCart = true;\n      }\n    });\n\n    if (isItemAlreadyInCart === false) {\n      // let item: Item = this.itemService.getItemById(itemId);\n      let cartItem = new CartItems(item, amountOfItems);\n      this.itemsInCart.push(cartItem);\n    }\n\n    this.cartChanged();\n  }\n\n  removeItemsFromCart(cartItem) {\n    let index = this.itemsInCart.indexOf(cartItem);\n\n    if (index > -1) {\n      this.itemsInCart.splice(index, 1);\n      this.itemService.updateItemQuantity(cartItem.item, cartItem.amount);\n      this.cartChanged();\n    }\n  }\n\n  cartChanged() {\n    this.observableItemsInCart.next(this.itemsInCart);\n  }\n\n}\n\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.ItemService));\n};\n\nCartService.ɵprov = i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(CartService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ItemService\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["C:\\WORK\\shop-app\\src\\app\\cart.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAAS,eAAT,QAA4C,MAA5C;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAKtB,EAAA,WAAA,CAAoB,WAApB,EAA4C;AAAxB,SAAA,WAAA,GAAA,WAAA;AAHpB,SAAA,WAAA,GAA2B,IAAI,KAAJ,EAA3B;AACA,SAAA,qBAAA,GAAsD,IAAI,eAAJ,CAAiC,KAAK,WAAtC,CAAtD;AAIC;;AAED,EAAA,cAAc,GAAA;AACZ,WAAO,KAAK,qBAAL,CAA2B,YAA3B,EAAP;AACD;;AAED,EAAA,aAAa,CAAC,IAAD,EAAa,aAAb,EAAkC;AAC7C,QAAI,mBAAmB,GAAY,KAAnC;AACA,SAAK,WAAL,CAAiB,kBAAjB,CAAoC,IAApC,EAA0C,CAAC,aAA3C;AACA,SAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAU,IAAG;AACpC,UAAI,UAAU,CAAC,IAAX,CAAgB,EAAhB,KAAuB,IAAI,CAAC,EAAhC,EAAoC;AAClC,QAAA,UAAU,CAAC,MAAX,IAAqB,aAArB;AACA,QAAA,mBAAmB,GAAG,IAAtB;AACD;AACF,KALD;;AAMA,QAAI,mBAAmB,KAAK,KAA5B,EAAmC;AACjC;AACA,UAAI,QAAQ,GAAG,IAAI,SAAJ,CAAc,IAAd,EAAoB,aAApB,CAAf;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,QAAtB;AACD;;AAED,SAAK,WAAL;AACD;;AAED,EAAA,mBAAmB,CAAC,QAAD,EAAoB;AACrC,QAAI,KAAK,GAAG,KAAK,WAAL,CAAiB,OAAjB,CAAyB,QAAzB,CAAZ;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,WAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAxB,EAA+B,CAA/B;AACA,WAAK,WAAL,CAAiB,kBAAjB,CAAoC,QAAQ,CAAC,IAA7C,EAAmD,QAAQ,CAAC,MAA5D;AACA,WAAK,WAAL;AACD;AACF;;AAED,EAAA,WAAW,GAAA;AACT,SAAK,qBAAL,CAA2B,IAA3B,CAAgC,KAAK,WAArC;AACD;;AA1CqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV;;;;;uBAED,W,EAAW,CAAA;UAHvB,UAGuB;WAHZ;AACV,MAAA,UAAU,EAAE;AADF,K;AAGY,GAAA,C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CartItems } from './cartItems';\nimport { Item } from './item';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ItemService } from './item.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  itemsInCart: CartItems[] = new Array<CartItems>();\n  observableItemsInCart: BehaviorSubject<CartItems[]> = new BehaviorSubject<CartItems[]>(this.itemsInCart);\n\n  constructor(private itemService: ItemService) {\n\n  }\n\n  getItemsInCart(): Observable<CartItems[]> {\n    return this.observableItemsInCart.asObservable();\n  }\n\n  addItemToCart(item: Item, amountOfItems: number) {\n    let isItemAlreadyInCart: boolean = false;\n    this.itemService.updateItemQuantity(item, -amountOfItems);\n    this.itemsInCart.forEach(itemInCart => {\n      if (itemInCart.item.id === item.id) {\n        itemInCart.amount += amountOfItems;\n        isItemAlreadyInCart = true;\n      }\n    });\n    if (isItemAlreadyInCart === false) {\n      // let item: Item = this.itemService.getItemById(itemId);\n      let cartItem = new CartItems(item, amountOfItems);\n      this.itemsInCart.push(cartItem);\n    }\n\n    this.cartChanged();\n  }\n\n  removeItemsFromCart(cartItem: CartItems) {\n    let index = this.itemsInCart.indexOf(cartItem);\n    if (index > -1) {\n      this.itemsInCart.splice(index, 1);\n      this.itemService.updateItemQuantity(cartItem.item, cartItem.amount);\n      this.cartChanged();\n    }\n  }\n\n  cartChanged() {\n    this.observableItemsInCart.next(this.itemsInCart);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}