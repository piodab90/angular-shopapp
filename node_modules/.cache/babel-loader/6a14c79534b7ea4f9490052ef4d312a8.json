{"ast":null,"code":"import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return (...args) => bindCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n  }\n\n  return function (...args) {\n    const context = this;\n    let subject;\n    const params = {\n      context,\n      subject,\n      callbackFunc,\n      scheduler\n    };\n    return new Observable(subscriber => {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject();\n\n          const handler = (...innerArgs) => {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        const state = {\n          args,\n          subscriber,\n          params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  const self = this;\n  const {\n    args,\n    subscriber,\n    params\n  } = state;\n  const {\n    callbackFunc,\n    context,\n    scheduler\n  } = params;\n  let {\n    subject\n  } = params;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    const handler = (...innerArgs) => {\n      const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n      this.add(scheduler.schedule(dispatchNext, 0, {\n        value,\n        subject\n      }));\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(state) {\n  const {\n    value,\n    subject\n  } = state;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(state) {\n  const {\n    err,\n    subject\n  } = state;\n  subject.error(err);\n}","map":{"version":3,"sources":["../../../src/internal/observable/bindCallback.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindCallback(callbackFunc, scheduler)(...args).pipe(map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const context = this;\n        let subject;\n        const params = {\n            context,\n            subject,\n            callbackFunc,\n            scheduler,\n        };\n        return new Observable(subscriber => {\n            if (!scheduler) {\n                if (!subject) {\n                    subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                const state = {\n                    args, subscriber, params,\n                };\n                return scheduler.schedule(dispatch, 0, state);\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const self = this;\n    const { args, subscriber, params } = state;\n    const { callbackFunc, context, scheduler } = params;\n    let { subject } = params;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n            this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            subject.error(err);\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(state) {\n    const { value, subject } = state;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(state) {\n    const { err, subject } = state;\n    subject.error(err);\n}\n//# sourceMappingURL=bindCallback.js.map"]},"metadata":{},"sourceType":"module"}