{"ast":null,"code":"import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nexport function zip(...observables) {\n  const resultSelector = observables[observables.length - 1];\n\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n  constructor(resultSelector) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n\n}\nexport class ZipSubscriber extends Subscriber {\n  constructor(destination, resultSelector, values = Object.create(null)) {\n    super(destination);\n    this.iterators = [];\n    this.active = 0;\n    this.resultSelector = typeof resultSelector === 'function' ? resultSelector : null;\n    this.values = values;\n  }\n\n  _next(value) {\n    const iterators = this.iterators;\n\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.unsubscribe();\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n\n      if (iterator.stillUnsubscribed) {\n        const destination = this.destination;\n        destination.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--;\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args = [];\n\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  _tryresultSelector(args) {\n    let result;\n\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  }\n\n}\n\nclass StaticIterator {\n  constructor(iterator) {\n    this.iterator = iterator;\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next() {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n\n}\n\nclass StaticArrayIterator {\n  constructor(array) {\n    this.array = array;\n    this.index = 0;\n    this.length = 0;\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value) {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? {\n      value: array[i],\n      done: false\n    } : {\n      value: null,\n      done: true\n    };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n\n}\n\nclass ZipBufferIterator extends OuterSubscriber {\n  constructor(destination, parent, observable) {\n    super(destination);\n    this.parent = parent;\n    this.observable = observable;\n    this.stillUnsubscribed = true;\n    this.buffer = [];\n    this.isComplete = false;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next() {\n    const buffer = this.buffer;\n\n    if (buffer.length === 0 && this.isComplete) {\n      return {\n        value: null,\n        done: true\n      };\n    } else {\n      return {\n        value: buffer.shift(),\n        done: false\n      };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value, index) {\n    return subscribeToResult(this, this.observable, this, index);\n  }\n\n}","map":{"version":3,"sources":["../../../src/internal/observable/zip.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        this.values = values;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        this.unsubscribe();\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                const destination = this.destination;\n                destination.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--;\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\nclass ZipBufferIterator extends OuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe(value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    }\n}\n//# sourceMappingURL=zip.js.map"]},"metadata":{},"sourceType":"module"}